# -*- coding: utf-8 -*-
import dash
from dash.dependencies import Input, Output, State, Event
import dash_core_components as dcc
import dash_html_components as html
import datetime
import json
import plotly.graph_objs as go

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

app.config['suppress_callback_exceptions'] = True
app.css.config.serve_locally = True
app.scripts.config.serve_locally = True

server = app.server

app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
    <head>
    <meta charset="utf-8">

    <title>Lunar Cycle Calendar</title>

    <link type="text/css" rel="stylesheet" href="https://codepen.io/chriddyp/pen/bWLwgP.css"/>

    <style>
        body {
            font: 400 1.5em Helvetica, sans-serif;
            color: rgb(245, 250, 245);
            background-color: rgb(59, 57, 57);
        }
    </style>
        {%favicon%}
        {%css%}

    </head>
    <body>
        {%app_entry%}
    <footer>
        {%config%}
        {%scripts%}
        
    </footer>
    </body>
</html>
'''
styles = {
    'hr': { 
    'display': 'block',
    'margin-top': '0.1rem',
    'margin-bottom': '0.1rem',
    'margin-left': 'auto',
    'margin-right': 'auto',
    'border-style': 'inset',
    'border-width': '0.1rem'},
}


moon81=('''001.1981 Jan 06 07:24
002.1981 Feb 04 22:15
003.1981 Mar 06 10:32
004.1981 Apr 04 20:21
005.1981 May 04 04:2
006.1981 Jun 02 11:34
007.1981 Jul 01 19:05 
008.1981 Jul 31 03:54 
009.1981 Aug 29 14:45
010.1981 Sep 28 04:08
011.1981 Oct 27 20:14
012.1981 Nov 26 14:39
013.1981 Dec 26 10:11
014.1982 Jan 25 04:57
015.1982 Feb 23 21:15
016.1982 Mar 25 10:20
017.1982 Apr 23 20:31
018.1982 May 23 04:4
019.1982 Jun 21 11:53
020.1982 Jul 20 18:58 
021.1982 Aug 19 02:46
022.1982 Sep 17 12:10
023.1982 Oct 17 00:04
024.1982 Nov 15 15:11
025.1982 Dec 15 09:19
026.1983 Jan 14 05:09
027.1983 Feb 13 00:33
028.1983 Mar 14 17:46
029.1983 Apr 13 08:00
030.1983 May 12 19:2
031.1983 Jun 11 04:39
032.1983 Jul 10 12:20 
033.1983 Aug 08 19:19
034.1983 Sep 07 02:36
035.1983 Oct 06 11:17
036.1983 Nov 04 22:22
037.1983 Dec 04 12:27
038.1984 Jan 03 05:17
039.1984 Feb 01 23:47
040.1984 Mar 02 18:32
041.1984 Apr 01 12:10
042.1984 May 01 03:4
043.1984 May 30 16:4
044.1984 Jun 29 03:19
045.1984 Jul 28 11:52 
046.1984 Aug 26 19:27
047.1984 Sep 25 03:12
048.1984 Oct 24 12:10
049.1984 Nov 22 22:59
050.1984 Dec 22 11:49
051.1985 Jan 21 02:30
052.1985 Feb 19 18:44
053.1985 Mar 21 12:00
054.1985 Apr 20 05:23
055.1985 May 19 21:4
056.1985 Jun 18 11:59
057.1985 Jul 17 23:57 
058.1985 Aug 16 10:06
059.1985 Sep 14 19:20
060.1985 Oct 14 04:34
061.1985 Nov 12 14:21
062.1985 Dec 12 00:56
063.1986 Jan 10 12:24
064.1986 Feb 09 00:58
065.1986 Mar 10 14:54
066.1986 Apr 09 06:11
067.1986 May 08 22:1
068.1986 Jun 07 14:02
069.1986 Jul 07 04:56 
070.1986 Aug 05 18:36
071.1986 Sep 04 07:10
072.1986 Oct 03 18:54
073.1986 Nov 02 06:02
074.1986 Dec 01 16:43
075.1986 Dec 31 03:11
076.1987 Jan 29 13:47
077.1987 Feb 28 00:54
078.1987 Mar 29 12:48
079.1987 Apr 28 01:37
080.1987 May 27 15:1
081.1987 Jun 26 05:38
082.1987 Jul 25 20:38 
083.1987 Aug 24 11:58
084.1987 Sep 23 03:08
085.1987 Oct 22 17:27
086.1987 Nov 21 06:33
087.1987 Dec 20 18:26
088.1988 Jan 19 05:27
089.1988 Feb 17 15:56
090.1988 Mar 18 02:05
091.1988 Apr 16 12:02
092.1988 May 15 22:1
093.1988 Jun 14 09:15
094.1988 Jul 13 21:54 
095.1988 Aug 12 12:32
096.1988 Sep 11 04:50
097.1988 Oct 10 21:49
098.1988 Nov 09 14:20
099.1988 Dec 09 05:36
100.1989 Jan 07 19:22
101.1989 Feb 06 07:38
102.1989 Mar 07 18:20
103.1989 Apr 06 03:35
104.1989 May 05 11:48
105.1989 Jun 03 19:55
106.1989 Jul 03 05:01 
107.1989 Aug 01 16:07
108.1989 Aug 31 05:46
109.1989 Sep 29 21:48
110.1989 Oct 29 15:28
111.1989 Nov 28 09:41
112.1989 Dec 28 03:20
113.1990 Jan 26 19:21
114.1990 Feb 25 08:56
115.1990 Mar 26 19:50
116.1990 Apr 25 04:29
117.1990 May 24 11:48
118.1990 Jun 22 18:56
119.1990 Jul 22 02:55 
120.1990 Aug 20 12:39
121.1990 Sep 19 00:46
122.1990 Oct 18 15:37
123.1990 Nov 17 09:05
124.1990 Dec 17 04:23
125.1991 Jan 15 23:51
126.1991 Feb 14 17:33
127.1991 Mar 16 08:13
128.1991 Apr 14 19:40
129.1991 May 14 04:3
130.1991 Jun 12 12:07
131.1991 Jul 11 19:07 
132.1991 Aug 10 02:28
133.1991 Sep 08 11:01
134.1991 Oct 07 21:38
135.1991 Nov 06 11:11
136.1991 Dec 06 03:57
137.1992 Jan 04 23:11
138.1992 Feb 03 19:01
139.1992 Mar 04 13:24
140.1992 Apr 03 05:03
141.1992 May 02 17:4
142.1992 Jun 01 03:58
143.1992 Jun 30 12:19
144.1992 Jul 29 19:36 
145.1992 Aug 28 02:43
146.1992 Sep 26 10:41
147.1992 Oct 25 20:34
148.1992 Nov 24 09:12
149.1992 Dec 24 00:44
150.1993 Jan 22 18:28
151.1993 Feb 21 13:06
152.1993 Mar 23 07:16
153.1993 Apr 21 23:50
154.1993 May 21 14:0
155.1993 Jun 20 01:53
156.1993 Jul 19 11:25 
157.1993 Aug 17 19:29
158.1993 Sep 16 03:11
159.1993 Oct 15 11:36
160.1993 Nov 13 21:35
161.1993 Dec 13 09:28
162.1994 Jan 11 23:12
163.1994 Feb 10 14:32
164.1994 Mar 12 07:07
165.1994 Apr 11 00:19
166.1994 May 10 17:0
167.1994 Jun 09 08:28
168.1994 Jul 08 21:38 
169.1994 Aug 07 08:45
170.1994 Sep 05 18:33
171.1994 Oct 05 03:55
172.1994 Nov 03 13:36
173.1994 Dec 02 23:55
174.1995 Jan 01 10:57
175.1995 Jan 30 22:50
176.1995 Mar 01 11:50
177.1995 Mar 31 02:11
178.1995 Apr 29 17:38
179.1995 May 29 09:2
180.1995 Jun 28 00:51
181.1995 Jul 27 15:13 
182.1995 Aug 26 04:31
183.1995 Sep 24 16:55
184.1995 Oct 24 04:36
185.1995 Nov 22 15:43
186.1995 Dec 22 02:23
187.1996 Jan 20 12:52
188.1996 Feb 18 23:32
189.1996 Mar 19 10:47
190.1996 Apr 17 22:51
191.1996 May 17 11:49
192.1996 Jun 16 01:38
193.1996 Jul 15 16:16 
194.1996 Aug 14 07:35
195.1996 Sep 12 23:07
196.1996 Oct 12 14:14
197.1996 Nov 11 04:16
198.1996 Dec 10 16:56
199.1997 Jan 09 04:26
200.1997 Feb 07 15:07
201.1997 Mar 09 01:16
202.1997 Apr 07 11:04
203.1997 May 06 20:4
204.1997 Jun 05 07:06
205.1997 Jul 04 18:42 
206.1997 Aug 03 08:16
207.1997 Sep 01 23:53
208.1997 Oct 01 16:53
209.1997 Oct 31 10:02
210.1997 Nov 30 02:15
211.1997 Dec 29 16:58
212.1998 Jan 28 06:02
213.1998 Feb 26 17:28
214.1998 Mar 28 03:15
215.1998 Apr 26 11:43
216.1998 May 25 19:3
217.1998 Jun 24 03:52
218.1998 Jul 23 13:45 
219.1998 Aug 22 02:04
220.1998 Sep 20 17:03
221.1998 Oct 20 10:11
222.1998 Nov 19 04:28
223.1998 Dec 18 22:44
224.1999 Jan 17 15:48
225.1999 Feb 16 06:41
226.1999 Mar 17 18:50
227.1999 Apr 16 04:24
228.1999 May 15 12:0
229.1999 Jun 13 19:04
230.1999 Jul 13 02:25 
231.1999 Aug 11 11:10
232.1999 Sep 09 22:03
233.1999 Oct 09 11:35
234.1999 Nov 08 03:54
235.1999 Dec 07 22:33''')
              
moon81r=('''
235.1999 Dec 07 22:33  
234.1999 Nov 08 03:54  
233.1999 Oct 09 11:35  
232.1999 Sep 09 22:03  
231.1999 Aug 11 11:10  
230.1999 Jul 13 02:25  
229.1999 Jun 13 19:04  
228.1999 May 15 12:06  
227.1999 Apr 16 04:24  
226.1999 Mar 17 18:50  
225.1999 Feb 16 06:41  
224.1999 Jan 17 15:48  
223.1998 Dec 18 22:44  
222.1998 Nov 19 04:28  
221.1998 Oct 20 10:11  
220.1998 Sep 20 17:03  
219.1998 Aug 22 02:04   
218.1998 Jul 23 13:45  
217.1998 Jun 24 03:52  
216.1998 May 25 19:34  
215.1998 Apr 26 11:43  
214.1998 Mar 28 03:15  
213.1998 Feb 26 17:28  
212.1998 Jan 28 06:02  
211.1997 Dec 29 16:58  
210.1997 Nov 30 02:15  
209.1997 Oct 31 10:02  
208.1997 Oct 01 16:53  
207.1997 Sep 01 23:53  
206.1997 Aug 03 08:16  
205.1997 Jul 04 18:42  
204.1997 Jun 05 07:06  
203.1997 May 06 20:49  
202.1997 Apr 07 11:04  
201.1997 Mar 09 01:16  
200.1997 Feb 07 15:07  
199.1997 Jan 09 04:26  
198.1996 Dec 10 16:56  
197.1996 Nov 11 04:16  
196.1996 Oct 12 14:14  
195.1996 Sep 12 23:07  
194.1996 Aug 14 07:35  
193.1996 Jul 15 16:16  
192.1996 Jun 16 01:38  
191.1996 May 17 11:49  
190.1996 Apr 17 22:51  
189.1996 Mar 19 10:47  
188.1996 Feb 18 23:32  
187.1996 Jan 20 12:52  
186.1995 Dec 22 02:23  
185.1995 Nov 22 15:43  
184.1995 Oct 24 04:36  
183.1995 Sep 24 16:55  
182.1995 Aug 26 04:31  
181.1995 Jul 27 15:13  
180.1995 Jun 28 00:51  
179.1995 May 29 09:28  
178.1995 Apr 29 17:38  
177.1995 Mar 31 02:11  
176.1995 Mar 01 11:50  
175.1995 Jan 30 22:50  
174.1995 Jan 01 10:57  
173.1994 Dec 02 23:55  
172.1994 Nov 03 13:36  
171.1994 Oct 05 03:55  
170.1994 Sep 05 18:33  
169.1994 Aug 07 08:45  
168.1994 Jul 08 21:38  
167.1994 Jun 09 08:28  
166.1994 May 10 17:08  
165.1994 Apr 11 00:19  
164.1994 Mar 12 07:07  
163.1994 Feb 10 14:32  
162.1994 Jan 11 23:12  
161.1993 Dec 13 09:28  
160.1993 Nov 13 21:35  
159.1993 Oct 15 11:36  
158.1993 Sep 16 03:11  
157.1993 Aug 17 19:29  
156.1993 Jul 19 11:25  
155.1993 Jun 20 01:53  
154.1993 May 21 14:08  
153.1993 Apr 21 23:50  
152.1993 Mar 23 07:16  
151.1993 Feb 21 13:06  
150.1993 Jan 22 18:28  
149.1992 Dec 24 00:44  
148.1992 Nov 24 09:12  
147.1992 Oct 25 20:34  
146.1992 Sep 26 10:41  
145.1992 Aug 28 02:43  
144.1992 Jul 29 19:36  
143.1992 Jun 30 12:19  
142.1992 Jun 01 03:58  
141.1992 May 02 17:46  
140.1992 Apr 03 05:03  
139.1992 Mar 04 13:24  
138.1992 Feb 03 19:01  
137.1992 Jan 04 23:11  
136.1991 Dec 06 03:57  
135.1991 Nov 06 11:11  
134.1991 Oct 07 21:38  
133.1991 Sep 08 11:01  
132.1991 Aug 10 02:28  
131.1991 Jul 11 19:07  
130.1991 Jun 12 12:07  
129.1991 May 14 04:37  
128.1991 Apr 14 19:40  
127.1991 Mar 16 08:13  
126.1991 Feb 14 17:33  
125.1991 Jan 15 23:51  
124.1990 Dec 17 04:23  
123.1990 Nov 17 09:05  
122.1990 Oct 18 15:37  
121.1990 Sep 19 00:46  
120.1990 Aug 20 12:39  
119.1990 Jul 22 02:55  
118.1990 Jun 22 18:56  
117.1990 May 24 11:48  
116.1990 Apr 25 04:29  
115.1990 Mar 26 19:50  
114.1990 Feb 25 08:56  
113.1990 Jan 26 19:21  
112.1989 Dec 28 03:20  
111.1989 Nov 28 09:41  
110.1989 Oct 29 15:28  
109.1989 Sep 29 21:48  
108.1989 Aug 31 05:46   
107.1989 Aug 01 16:07  
106.1989 Jul 03 05:01  
105.1989 Jun 03 19:55  
104.1989 May 05 11:48  
103.1989 Apr 06 03:35  
102.1989 Mar 07 18:20  
101.1989 Feb 06 07:38  
100.1989 Jan 07 19:22   
099.1988 Dec 09 05:36  
098.1988 Nov 09 14:20  
097.1988 Oct 10 21:49  
096.1988 Sep 11 04:50  
095.1988 Aug 12 12:32  
094.1988 Jul 13 21:54  
093.1988 Jun 14 09:15  
092.1988 May 15 22:13  
091.1988 Apr 16 12:02  
090.1988 Mar 18 02:05  
089.1988 Feb 17 15:56  
088.1988 Jan 19 05:27  
087.1987 Dec 20 18:26  
086.1987 Nov 21 06:33  
085.1987 Oct 22 17:27  
084.1987 Sep 23 03:08  
083.1987 Aug 24 11:58  
082.1987 Jul 25 20:38  
081.1987 Jun 26 05:38  
080.1987 May 27 15:15  
079.1987 Apr 28 01:37  
078.1987 Mar 29 12:48  
077.1987 Feb 28 00:54  
076.1987 Jan 29 13:47  
075.1986 Dec 31 03:11  
074.1986 Dec 01 16:43  
073.1986 Nov 02 06:02  
072.1986 Oct 03 18:54   
071.1986 Sep 04 07:10  
070.1986 Aug 05 18:36  
069.1986 Jul 07 04:56  
068.1986 Jun 07 14:02  
067.1986 May 08 22:12  
066.1986 Apr 09 06:11  
065.1986 Mar 10 14:54  
064.1986 Feb 09 00:58  
063.1986 Jan 10 12:24  
062.1985 Dec 12 00:56  
061.1985 Nov 12 14:21  
060.1985 Oct 14 04:34  
059.1985 Sep 14 19:20  
058.1985 Aug 16 10:06  
057.1985 Jul 17 23:57  
056.1985 Jun 18 11:59  
055.1985 May 19 21:42  
054.1985 Apr 20 05:23  
053.1985 Mar 21 12:00  
052.1985 Feb 19 18:44  
051.1985 Jan 21 02:30   
050.1984 Dec 22 11:49  
049.1984 Nov 22 22:59  
048.1984 Oct 24 12:10  
047.1984 Sep 25 03:12  
046.1984 Aug 26 19:27  
045.1984 Jul 28 11:52  
044.1984 Jun 29 03:19  
043.1984 May 30 16:49  
042.1984 May 01 03:46  
041.1984 Apr 01 12:10  
040.1984 Mar 02 18:32  
039.1984 Feb 01 23:47  
038.1984 Jan 03 05:17  
037.1983 Dec 04 12:27  
036.1983 Nov 04 22:22  
035.1983 Oct 06 11:17  
034.1983 Sep 07 02:36  
033.1983 Aug 08 19:19   
032.1983 Jul 10 12:20  
031.1983 Jun 11 04:39  
030.1983 May 12 19:27  
029.1983 Apr 13 08:00  
028.1983 Mar 14 17:46  
027.1983 Feb 13 00:33  
026.1983 Jan 14 05:09  
025.1982 Dec 15 09:19  
024.1982 Nov 15 15:11  
023.1982 Oct 17 00:04  
022.1982 Sep 17 12:10  
021.1982 Aug 19 02:46  
020.1982 Jul 20 18:58  
019.1982 Jun 21 11:53  
018.1982 May 23 04:42  
017.1982 Apr 23 20:31   
016.1982 Mar 25 10:20  
015.1982 Feb 23 21:15  
014.1982 Jan 25 04:57  
013.1981 Dec 26 10:11  
012.1981 Nov 26 14:39  
011.1981 Oct 27 20:14  
010.1981 Sep 28 04:08  
009.1981 Aug 29 14:45  
008.1981 Jul 31 03:54  
007.1981 Jul 01 19:05  
006.1981 Jun 02 11:34  
005.1981 May 04 04:21   
004.1981 Apr 04 20:21  
003.1981 Mar 06 10:32  
002.1981 Feb 04 22:15  
001.1981 Jan 06 07:24''')

moon81co=('''001.1981 Jan 06 07:24 
235.1999 Dec 07 22:33 
002.1981 Feb 04 22:15 
234.1999 Nov 08 03:54 
003.1981 Mar 06 10:32 
233.1999 Oct 09 11:35 
004.1981 Apr 04 20:21 
232.1999 Sep 09 22:03 
005.1981 May 04 04:21 
231.1999 Aug 11 11:10 
006.1981 Jun 02 11:34 
230.1999 Jul 13 02:25 
007.1981 Jul 01 19:05 
229.1999 Jun 13 19:04 
008.1981 Jul 31 03:54 
228.1999 May 15 12:06 
009.1981 Aug 29 14:45 
227.1999 Apr 16 04:24 
010.1981 Sep 28 04:08 
226.1999 Mar 17 18:50 
011.1981 Oct 27 20:14  
225.1999 Feb 16 06:41  
012.1981 Nov 26 14:39  
224.1999 Jan 17 15:48 
013.1981 Dec 26 10:11 
223.1998 Dec 18 22:44 
014.1982 Jan 25 04:57 
222.1998 Nov 19 04:28 
015.1982 Feb 23 21:15 
221.1998 Oct 20 10:11 
016.1982 Mar 25 10:20 
220.1998 Sep 20 17:03 
017.1982 Apr 23 20:31 
219.1998 Aug 22 02:04 
018.1982 May 23 04:42 
218.1998 Jul 23 13:45  
019.1982 Jun 21 11:53 
217.1998 Jun 24 03:52 
020.1982 Jul 20 18:58 
216.1998 May 25 19:34 
021.1982 Aug 19 02:46  
215.1998 Apr 26 11:43  
022.1982 Sep 17 12:10  
214.1998 Mar 28 03:15  
023.1982 Oct 17 00:04  
213.1998 Feb 26 17:28  
024.1982 Nov 15 15:11  
212.1998 Jan 28 06:02  
025.1982 Dec 15 09:19  
211.1997 Dec 29 16:58   
026.1983 Jan 14 05:09 
210.1997 Nov 30 02:15  
027.1983 Feb 13 00:33  
209.1997 Oct 31 10:02   
028.1983 Mar 14 17:46  
208.1997 Oct 01 16:53  
029.1983 Apr 13 08:00  
207.1997 Sep 01 23:53  
030.1983 May 12 19:27  
206.1997 Aug 03 08:16  
031.1983 Jun 11 04:39  
205.1997 Jul 04 18:42  
032.1983 Jul 10 12:20  
204.1997 Jun 05 07:06  
033.1983 Aug 08 19:19  
203.1997 May 06 20:49  
034.1983 Sep 07 02:36  
202.1997 Apr 07 11:04  
035.1983 Oct 06 11:17  
201.1997 Mar 09 01:16  
036.1983 Nov 04 22:22  
200.1997 Feb 07 15:07  
037.1983 Dec 04 12:27  
199.1997 Jan 09 04:26   
038.1984 Jan 03 05:17  
198.1996 Dec 10 16:56  
039.1984 Feb 01 23:47 
197.1996 Nov 11 04:16  
040.1984 Mar 02 18:32  
196.1996 Oct 12 14:14  
041.1984 Apr 01 12:10  
195.1996 Sep 12 23:07   
042.1984 May 01 03:46  
194.1996 Aug 14 07:35  
043.1984 May 30 16:49  
193.1996 Jul 15 16:16  
044.1984 Jun 29 03:19  
192.1996 Jun 16 01:38  
045.1984 Jul 28 11:52  
191.1996 May 17 11:49 
046.1984 Aug 26 19:27  
190.1996 Apr 17 22:51  
047.1984 Sep 25 03:12   
189.1996 Mar 19 10:47  
048.1984 Oct 24 12:10  
188.1996 Feb 18 23:32  
049.1984 Nov 22 22:59  
187.1996 Jan 20 12:52  
050.1984 Dec 22 11:49  
186.1995 Dec 22 02:23  
051.1985 Jan 21 02:30   
185.1995 Nov 22 15:43    
052.1985 Feb 19 18:44 
184.1995 Oct 24 04:36  
053.1985 Mar 21 12:00  
183.1995 Sep 24 16:55  
054.1985 Apr 20 05:23  
182.1995 Aug 26 04:31 
055.1985 May 19 21:42  
181.1995 Jul 27 15:13   
056.1985 Jun 18 11:59  
180.1995 Jun 28 00:51  
057.1985 Jul 17 23:57   
179.1995 May 29 09:28 
058.1985 Aug 16 10:06  
178.1995 Apr 29 17:38  
059.1985 Sep 14 19:20  
177.1995 Mar 31 02:11  
060.1985 Oct 14 04:34  
176.1995 Mar 01 11:50  
061.1985 Nov 12 14:21  
175.1995 Jan 30 22:50   
062.1985 Dec 12 00:56  
174.1995 Jan 01 10:57  
063.1986 Jan 10 12:24  
173.1994 Dec 02 23:55  
064.1986 Feb 09 00:58  
172.1994 Nov 03 13:36  
065.1986 Mar 10 14:54  
171.1994 Oct 05 03:55  
066.1986 Apr 09 06:11 
170.1994 Sep 05 18:33  
067.1986 May 08 22:12  
169.1994 Aug 07 08:45  
068.1986 Jun 07 14:02  
168.1994 Jul 08 21:38  
069.1986 Jul 07 04:56   
167.1994 Jun 09 08:28  
070.1986 Aug 05 18:36  
166.1994 May 10 17:08   
071.1986 Sep 04 07:10  
165.1994 Apr 11 00:19  
072.1986 Oct 03 18:54  
164.1994 Mar 12 07:07  
073.1986 Nov 02 06:02  
163.1994 Feb 10 14:32   
074.1986 Dec 01 16:43  
162.1994 Jan 11 23:12  
075.1986 Dec 31 03:11  
161.1993 Dec 13 09:28  
076.1987 Jan 29 13:47  
160.1993 Nov 13 21:35  
077.1987 Feb 28 00:54  
159.1993 Oct 15 11:36   
078.1987 Mar 29 12:48  
158.1993 Sep 16 03:11  
079.1987 Apr 28 01:37  
157.1993 Aug 17 19:29  
080.1987 May 27 15:15  
156.1993 Jul 19 11:25  
081.1987 Jun 26 05:38  
155.1993 Jun 20 01:53   
082.1987 Jul 25 20:38   
154.1993 May 21 14:08  
083.1987 Aug 24 11:58  
153.1993 Apr 21 23:50  
084.1987 Sep 23 03:08  
152.1993 Mar 23 07:16  
085.1987 Oct 22 17:27  
151.1993 Feb 21 13:06   
086.1987 Nov 21 06:33 
150.1993 Jan 22 18:28 
087.1987 Dec 20 18:26  
149.1992 Dec 24 00:44  
088.1988 Jan 19 05:27  
148.1992 Nov 24 09:12  
089.1988 Feb 17 15:56  
147.1992 Oct 25 20:34  
090.1988 Mar 18 02:05  
146.1992 Sep 26 10:41  
091.1988 Apr 16 12:02  
145.1992 Aug 28 02:43  
092.1988 May 15 22:13  
144.1992 Jul 29 19:36  
093.1988 Jun 14 09:15  
143.1992 Jun 30 12:19   
094.1988 Jul 13 21:54  
142.1992 Jun 01 03:58  
095.1988 Aug 12 12:32  
141.1992 May 02 17:46  
096.1988 Sep 11 04:50  
140.1992 Apr 03 05:03  
097.1988 Oct 10 21:49  
139.1992 Mar 04 13:24  
098.1988 Nov 09 14:20  
138.1992 Feb 03 19:01  
099.1988 Dec 09 05:36  
137.1992 Jan 04 23:11 
100.1989 Jan 07 19:22  
136.1991 Dec 06 03:57   
101.1989 Feb 06 07:38  
135.1991 Nov 06 11:11  
102.1989 Mar 07 18:20  
134.1991 Oct 07 21:38  
103.1989 Apr 06 03:35  
133.1991 Sep 08 11:01  
104.1989 May 05 11:48  
132.1991 Aug 10 02:28  
105.1989 Jun 03 19:55  
131.1991 Jul 11 19:07   
106.1989 Jul 03 05:01  
130.1991 Jun 12 12:07  
107.1989 Aug 01 16:07  
129.1991 May 14 04:37  
108.1989 Aug 31 05:46  
128.1991 Apr 14 19:40 
109.1989 Sep 29 21:48  
127.1991 Mar 16 08:13  
110.1989 Oct 29 15:28  
126.1991 Feb 14 17:33  
111.1989 Nov 28 09:41  
125.1991 Jan 15 23:51  
112.1989 Dec 28 03:20  
124.1990 Dec 17 04:23   
113.1990 Jan 26 19:21  
123.1990 Nov 17 09:05  
114.1990 Feb 25 08:56  
122.1990 Oct 18 15:37  
115.1990 Mar 26 19:50  
121.1990 Sep 19 00:46  
116.1990 Apr 25 04:29  
120.1990 Aug 20 12:39  
117.1990 May 24 11:48  
119.1990 Jul 22 02:55  
118.1990 Jun 22 18:56 
118.1990 Jun 22 18:56  
119.1990 Jul 22 02:55   
117.1990 May 24 11:48  
120.1990 Aug 20 12:39  
116.1990 Apr 25 04:29 
121.1990 Sep 19 00:46  
115.1990 Mar 26 19:50 
122.1990 Oct 18 15:37  
114.1990 Feb 25 08:56  
123.1990 Nov 17 09:05 
113.1990 Jan 26 19:21  
124.1990 Dec 17 04:23  
112.1989 Dec 28 03:20  
125.1991 Jan 15 23:51   
111.1989 Nov 28 09:41  
126.1991 Feb 14 17:33  
110.1989 Oct 29 15:28  
127.1991 Mar 16 08:13  
109.1989 Sep 29 21:48  
128.1991 Apr 14 19:40  
108.1989 Aug 31 05:46  
129.1991 May 14 04:37  
107.1989 Aug 01 16:07
130.1991 Jun 12 12:07  
106.1989 Jul 03 05:01  
131.1991 Jul 11 19:07  
105.1989 Jun 03 19:55 
132.1991 Aug 10 02:28  
104.1989 May 05 11:48  
133.1991 Sep 08 11:01  
103.1989 Apr 06 03:35  
134.1991 Oct 07 21:38  
102.1989 Mar 07 18:20   
135.1991 Nov 06 11:11  
101.1989 Feb 06 07:38 
136.1991 Dec 06 03:57  
100.1989 Jan 07 19:22  
137.1992 Jan 04 23:11  
099.1988 Dec 09 05:36 
138.1992 Feb 03 19:01  
098.1988 Nov 09 14:20  
139.1992 Mar 04 13:24  
097.1988 Oct 10 21:49  
140.1992 Apr 03 05:03  
096.1988 Sep 11 04:50  
141.1992 May 02 17:46  
095.1988 Aug 12 12:32  
142.1992 Jun 01 03:58  
094.1988 Jul 13 21:54 
143.1992 Jun 30 12:19  
093.1988 Jun 14 09:15   
144.1992 Jul 29 19:36  
092.1988 May 15 22:13  
145.1992 Aug 28 02:43  
091.1988 Apr 16 12:02  
146.1992 Sep 26 10:41   
090.1988 Mar 18 02:05  
147.1992 Oct 25 20:34  
089.1988 Feb 17 15:56  
148.1992 Nov 24 09:12  
088.1988 Jan 19 05:27  
149.1992 Dec 24 00:44  
087.1987 Dec 20 18:26  
150.1993 Jan 22 18:28  
086.1987 Nov 21 06:33  
151.1993 Feb 21 13:06 
085.1987 Oct 22 17:27  
152.1993 Mar 23 07:16  
084.1987 Sep 23 03:08  
153.1993 Apr 21 23:50   
083.1987 Aug 24 11:58   
154.1993 May 21 14:08   
082.1987 Jul 25 20:38    
155.1993 Jun 20 01:53   
081.1987 Jun 26 05:38  
156.1993 Jul 19 11:25  
080.1987 May 27 15:15  
157.1993 Aug 17 19:29   
079.1987 Apr 28 01:37  
158.1993 Sep 16 03:11  
078.1987 Mar 29 12:48  
159.1993 Oct 15 11:36   
077.1987 Feb 28 00:54  
160.1993 Nov 13 21:35  
076.1987 Jan 29 13:47  
161.1993 Dec 13 09:28  
075.1986 Dec 31 03:11  
162.1994 Jan 11 23:12  
074.1986 Dec 01 16:43  
163.1994 Feb 10 14:32  
073.1986 Nov 02 06:02  
164.1994 Mar 12 07:07   
072.1986 Oct 03 18:54   
165.1994 Apr 11 00:19   
071.1986 Sep 04 07:10  
166.1994 May 10 17:08  
070.1986 Aug 05 18:36  
167.1994 Jun 09 08:28  
069.1986 Jul 07 04:56  
168.1994 Jul 08 21:38 
068.1986 Jun 07 14:02  
169.1994 Aug 07 08:45  
067.1986 May 08 22:12  
170.1994 Sep 05 18:33  
066.1986 Apr 09 06:11    
171.1994 Oct 05 03:55   
065.1986 Mar 10 14:54   
172.1994 Nov 03 13:36  
064.1986 Feb 09 00:58  
173.1994 Dec 02 23:55  
063.1986 Jan 10 12:24  
174.1995 Jan 01 10:57  
062.1985 Dec 12 00:56  
175.1995 Jan 30 22:50  
061.1985 Nov 12 14:21  
176.1995 Mar 01 11:50  
060.1985 Oct 14 04:34  
177.1995 Mar 31 02:11  
059.1985 Sep 14 19:20  
178.1995 Apr 29 17:38  
058.1985 Aug 16 10:06  
179.1995 May 29 09:28 
057.1985 Jul 17 23:57  
180.1995 Jun 28 00:51 
056.1985 Jun 18 11:59   
181.1995 Jul 27 15:13  
055.1985 May 19 21:42  
182.1995 Aug 26 04:31  
054.1985 Apr 20 05:23 
183.1995 Sep 24 16:55  
053.1985 Mar 21 12:00 
184.1995 Oct 24 04:36  
052.1985 Feb 19 18:44  
185.1995 Nov 22 15:43  
051.1985 Jan 21 02:30 
186.1995 Dec 22 02:23  
050.1984 Dec 22 11:49  
187.1996 Jan 20 12:52  
049.1984 Nov 22 22:59  
188.1996 Feb 18 23:32  
048.1984 Oct 24 12:10  
189.1996 Mar 19 10:47 
047.1984 Sep 25 03:12  
190.1996 Apr 17 22:51  
046.1984 Aug 26 19:27  
191.1996 May 17 11:49  
045.1984 Jul 28 11:52  
192.1996 Jun 16 01:38  
044.1984 Jun 29 03:19  
193.1996 Jul 15 16:16  
043.1984 May 30 16:49  
194.1996 Aug 14 07:35  
042.1984 May 01 03:46  
195.1996 Sep 12 23:07  
041.1984 Apr 01 12:10  
196.1996 Oct 12 14:14  
040.1984 Mar 02 18:32  
197.1996 Nov 11 04:16  
039.1984 Feb 01 23:47  
198.1996 Dec 10 16:56  
038.1984 Jan 03 05:17  
199.1997 Jan 09 04:26  
037.1983 Dec 04 12:27  
200.1997 Feb 07 15:07  
036.1983 Nov 04 22:22  
201.1997 Mar 09 01:16  
035.1983 Oct 06 11:17  
202.1997 Apr 07 11:04  
034.1983 Sep 07 02:36  
203.1997 May 06 20:49  
033.1983 Aug 08 19:19  
204.1997 Jun 05 07:06  
032.1983 Jul 10 12:20  
205.1997 Jul 04 18:42  
031.1983 Jun 11 04:39  
206.1997 Aug 03 08:16  
030.1983 May 12 19:27  
207.1997 Sep 01 23:53  
029.1983 Apr 13 08:00  
208.1997 Oct 01 16:53  
028.1983 Mar 14 17:46  
209.1997 Oct 31 10:02  
027.1983 Feb 13 00:33  
210.1997 Nov 30 02:15  
026.1983 Jan 14 05:09 
211.1997 Dec 29 16:58  
025.1982 Dec 15 09:19  
212.1998 Jan 28 06:02  
024.1982 Nov 15 15:11  
213.1998 Feb 26 17:28  
023.1982 Oct 17 00:04  
214.1998 Mar 28 03:15  
022.1982 Sep 17 12:10 
215.1998 Apr 26 11:43 
021.1982 Aug 19 02:46 
216.1998 May 25 19:34 
020.1982 Jul 20 18:58 
217.1998 Jun 24 03:52 
019.1982 Jun 21 11:53  
218.1998 Jul 23 13:45  
018.1982 May 23 04:42   
219.1998 Aug 22 02:04  
017.1982 Apr 23 20:31  
220.1998 Sep 20 17:03   
016.1982 Mar 25 10:20 
221.1998 Oct 20 10:11   
015.1982 Feb 23 21:15 
222.1998 Nov 19 04:28    
014.1982 Jan 25 04:57    
223.1998 Dec 18 22:44   
013.1981 Dec 26 10:11   
224.1999 Jan 17 15:48  
012.1981 Nov 26 14:39  
225.1999 Feb 16 06:41  
011.1981 Oct 27 20:14  
226.1999 Mar 17 18:50  
010.1981 Sep 28 04:08  
227.1999 Apr 16 04:24  
009.1981 Aug 29 14:45  
228.1999 May 15 12:06  
008.1981 Jul 31 03:54  
229.1999 Jun 13 19:04  
007.1981 Jul 01 19:05  
230.1999 Jul 13 02:25  
006.1981 Jun 02 11:34  
231.1999 Aug 11 11:10   
005.1981 May 04 04:21  
232.1999 Sep 09 22:03  
004.1981 Apr 04 20:21 
233.1999 Oct 09 11:35  
003.1981 Mar 06 10:32 
234.1999 Nov 08 03:54  
002.1981 Feb 04 22:15  
235.1999 Dec 07 22:33  
001.1981 Jan 06 07:24''')

moon00=('''236.2000 Jan 06 18:15  
237.2000 Feb 05 13:05
238.2000 Mar 06 05:19 
239.2000 Apr 04 18:15 
240.2000 May 04 04:14
241.2000 Jun 02 12:16
242.2000 Jul 01 19:22
243.2000 Jul 31 02:27
244.2000 Aug 29 10:21
245.2000 Sep 27 19:54
246.2000 Oct 27 07:59 
247.2000 Nov 25 23:13
248.2000 Dec 25 17:24
249.2001 Jan 24 13:09 
250.2001 Feb 23 08:23 
251.2001 Mar 25 01:24  
252.2001 Apr 23 15:28 
253.2001 May 23 02:48 
254.2001 Jun 21 11:59 
255.2001 Jul 20 19:46
256.2001 Aug 19 02:56 
257.2001 Sep 17 10:28
258.2001 Oct 16 19:24 
259.2001 Nov 15 06:41 
260.2001 Dec 14 20:49
261.2002 Jan 13 13:31
262.2002 Feb 12 07:43 
263.2002 Mar 14 02:05 
264.2002 Apr 12 19:23 
265.2002 May 12 10:47
266.2002 Jun 10 23:48
267.2002 Jul 10 10:27 
268.2002 Aug 08 19:16 
269.2002 Sep 07 03:11
270.2002 Oct 06 11:18
271.2002 Nov 04 20:36 
272.2002 Dec 04 07:36
273.2003 Jan 02 20:25
274.2003 Feb 01 10:51 
275.2003 Mar 03 02:37
276.2003 Apr 01 19:21
277.2003 May 01 12:16
278.2003 May 31 04:21 
279.2003 Jun 29 18:40 
280.2003 Jul 29 06:53
281.2003 Aug 27 17:27
282.2003 Sep 26 03:09 
283.2003 Oct 25 12:51
284.2003 Nov 23 23:00
285.2003 Dec 23 09:45 
286.2004 Jan 21 21:08
287.2004 Feb 20 09:21
288.2004 Mar 20 22:45  
289.2004 Apr 19 13:24
290.2004 May 19 04:55
291.2004 Jun 17 20:29
292.2004 Jul 17 11:25 
293.2004 Aug 16 01:24
294.2004 Sep 14 14:29
295.2004 Oct 14 02:48 
296.2004 Nov 12 14:27
297.2004 Dec 12 01:29
298.2005 Jan 10 12:04
299.2005 Feb 08 22:30
300.2005 Mar 10 09:13
301.2005 Apr 08 20:35
302.2005 May 08 08:49
303.2005 Jun 06 21:58  
304.2005 Jul 06 12:05 
305.2005 Aug 05 03:06
306.2005 Sep 03 18:46
307.2005 Oct 03 10:28
308.2005 Nov 02 01:24
309.2005 Dec 01 15:00
310.2005 Dec 31 03:12
311.2006 Jan 29 14:16
312.2006 Feb 28 00:33
313.2006 Mar 29 10:18 
314.2006 Apr 27 19:46
315.2006 May 27 05:28
316.2006 Jun 25 16:07
317.2006 Jul 25 04:32   
318.2006 Aug 23 19:11 
319.2006 Sep 22 11:46 
320.2006 Oct 22 05:15
321.2006 Nov 20 22:18 
322.2006 Dec 20 14:01 
323.2007 Jan 19 04:01
324.2007 Feb 17 16:15 
325.2007 Mar 19 02:44
326.2007 Apr 17 11:38
327.2007 May 16 19:29
328.2007 Jun 15 03:15 
329.2007 Jul 14 12:05  
330.2007 Aug 12 23:04   
331.2007 Sep 11 12:45  
332.2007 Oct 11 05:02  
333.2007 Nov 09 23:04  
334.2007 Dec 09 17:41  
335.2008 Jan 08 11:38
336.2008 Feb 07 03:45
337.2008 Mar 07 17:15  
338.2008 Apr 06 03:56  
339.2008 May 05 12:19  
340.2008 Jun 03 19:24   
341.2008 Jul 03 02:20   
342.2008 Aug 01 10:14   
343.2008 Aug 30 19:59  
344.2008 Sep 29 08:13   
345.2008 Oct 28 23:15 
346.2008 Nov 27 16:56  
347.2008 Dec 27 12:24  
348.2009 Jan 26 07:56
349.2009 Feb 25 01:37
350.2009 Mar 26 16:08
351.2009 Apr 25 03:24 
352.2009 May 24 12:12 
353.2009 Jun 22 19:36
354.2009 Jul 22 02:35 
355.2009 Aug 20 10:02
356.2009 Sep 18 18:45
357.2009 Oct 18 05:33
358.2009 Nov 16 19:14
359.2009 Dec 16 12:03
360.2010 Jan 15 07:13
361.2010 Feb 14 02:53
362.2010 Mar 15 21:03 
363.2010 Apr 14 12:31  
364.2010 May 14 01:06  
365.2010 Jun 12 11:16 
366.2010 Jul 11 19:41
367.2010 Aug 10 03:09
368.2010 Sep 08 10:30
369.2010 Oct 07 18:45
370.2010 Nov 06 04:52
371.2010 Dec 05 17:37
372.2011 Jan 04 09:05
373.2011 Feb 03 02:33
374.2011 Mar 04 20:48 
375.2011 Apr 03 14:34
376.2011 May 03 06:51 
377.2011 Jun 01 21:03 
378.2011 Jul 01 08:54
379.2011 Jul 30 18:40 
380.2011 Aug 29 03:04 
381.2011 Sep 27 11:09
382.2011 Oct 26 19:57  
383.2011 Nov 25 06:11 
384.2011 Dec 24 18:08
385.2012 Jan 23 07:42
386.2012 Feb 21 22:37 
387.2012 Mar 22 14:39 
388.2012 Apr 21 07:20
389.2012 May 20 23:48 
390.2012 Jun 19 15:03
391.2012 Jul 19 04:25   
392.2012 Aug 17 15:55 
393.2012 Sep 16 02:11
394.2012 Oct 15 12:03
395.2012 Nov 13 22:08 
396.2012 Dec 13 08:42
397.2013 Jan 11 19:45
398.2013 Feb 10 07:23 
399.2013 Mar 11 19:54
400.2013 Apr 10 09:39   
401.2013 May 10 00:32
402.2013 Jun 08 15:59 
403.2013 Jul 08 07:16 
404.2013 Aug 06 21:52 
405.2013 Sep 05 11:36 
406.2013 Oct 05 00:34
407.2013 Nov 03 12:50
408.2013 Dec 03 00:22 
409.2014 Jan 01 11:15
410.2014 Jan 30 21:41   
411.2014 Mar 01 08:03
412.2014 Mar 30 18:48 
413.2014 Apr 29 06:18
414.2014 May 28 18:43
415.2014 Jun 27 08:11
416.2014 Jul 26 22:43
417.2014 Aug 25 14:13 
418.2014 Sep 24 06:14
419.2014 Oct 23 21:56   
420.2014 Nov 22 12:32 
421.2014 Dec 22 01:36
422.2015 Jan 20 13:15
423.2015 Feb 18 23:49 
424.2015 Mar 20 09:39
425.2015 Apr 18 18:59
426.2015 May 18 04:16
427.2015 Jun 16 14:08
428.2015 Jul 16 01:26 
429.2015 Aug 14 14:55 
430.2015 Sep 13 06:43  
431.2015 Oct 13 00:07
432.2015 Nov 11 17:48 
433.2015 Dec 11 10:30 
434.2016 Jan 10 01:31
435.2016 Feb 08 14:40
436.2016 Mar 09 01:56
437.2016 Apr 07 11:25
438.2016 May 06 19:31 
439.2016 Jun 05 03:02
440.2016 Jul 04 11:03 
441.2016 Aug 02 20:47
442.2016 Sep 01 09:05
443.2016 Oct 01 00:13 
444.2016 Oct 30 17:40
445.2016 Nov 29 12:20 
446.2016 Dec 29 06:54 
447.2017 Jan 28 00:08 
448.2017 Feb 26 15:00
449.2017 Mar 28 02:59
450.2017 Apr 26 12:18
451.2017 May 25 19:46
452.2017 Jun 24 02:33 
453.2017 Jul 23 09:47
454.2017 Aug 21 18:32
455.2017 Sep 20 05:31 
456.2017 Oct 19 19:13
457.2017 Nov 18 11:43
458.2017 Dec 18 06:31
459.2018 Jan 17 02:18
460.2018 Feb 15 21:07 
461.2018 Mar 17 13:14 
462.2018 Apr 16 02:00
463.2018 May 15 11:50
464.2018 Jun 13 19:45 
465.2018 Jul 13 02:50
466.2018 Aug 11 09:59
467.2018 Sep 09 18:03  
468.2018 Oct 09 03:48
469.2018 Nov 07 16:03 
470.2018 Dec 07 07:22''')

moon00r=('''470.2018 Dec 07 07:22
469.2018 Nov 07 16:03 
468.2018 Oct 09 03:48
467.2018 Sep 09 18:03 
466.2018 Aug 11 09:59
465.2018 Jul 13 02:50
464.2018 Jun 13 19:45  
463.2018 May 15 11:50
462.2018 Apr 16 02:00
461.2018 Mar 17 13:14 
460.2018 Feb 15 21:07 
459.2018 Jan 17 02:18
458.2017 Dec 18 06:31
457.2017 Nov 18 11:43
456.2017 Oct 19 19:13
455.2017 Sep 20 05:31
454.2017 Aug 21 18:32 
453.2017 Jul 23 09:47 
452.2017 Jun 24 02:33  
451.2017 May 25 19:46 
450.2017 Apr 26 12:18 
449.2017 Mar 28 02:59  
448.2017 Feb 26 15:00    
447.2017 Jan 28 00:08  
446.2016 Dec 29 06:54  
445.2016 Nov 29 12:20  
444.2016 Oct 30 17:40  
443.2016 Oct 01 00:13  
442.2016 Sep 01 09:05 
441.2016 Aug 02 20:47  
440.2016 Jul 04 11:03  
439.2016 Jun 05 03:02  
438.2016 May 06 19:31    
437.2016 Apr 07 11:25   
436.2016 Mar 09 01:56 
435.2016 Feb 08 14:40  
434.2016 Jan 10 01:31 
433.2015 Dec 11 10:30  
432.2015 Nov 11 17:48   
431.2015 Oct 13 00:07 
430.2015 Sep 13 06:43   
429.2015 Aug 14 14:55  
428.2015 Jul 16 01:26  
427.2015 Jun 16 14:08 
426.2015 May 18 04:16  
425.2015 Apr 18 18:59 
424.2015 Mar 20 09:39    
423.2015 Feb 18 23:49  
422.2015 Jan 20 13:15  
421.2014 Dec 22 01:36 
420.2014 Nov 22 12:32  
419.2014 Oct 23 21:56   
418.2014 Sep 24 06:14 
417.2014 Aug 25 14:13  
416.2014 Jul 26 22:43 
415.2014 Jun 27 08:11    
414.2014 May 28 18:43 
413.2014 Apr 29 06:18  
412.2014 Mar 30 18:48  
411.2014 Mar 01 08:03  
410.2014 Jan 30 21:41  
409.2014 Jan 01 11:15 
408.2013 Dec 03 00:22    
407.2013 Nov 03 12:50 
406.2013 Oct 05 00:34  
405.2013 Sep 05 11:36  
404.2013 Aug 06 21:52    
403.2013 Jul 08 07:16  
402.2013 Jun 08 15:59  
401.2013 May 10 00:32 
400.2013 Apr 10 09:39  
399.2013 Mar 11 19:54 
398.2013 Feb 10 07:23    
397.2013 Jan 11 19:45  
396.2012 Dec 13 08:42 
395.2012 Nov 13 22:08  
394.2012 Oct 15 12:03 
393.2012 Sep 16 02:11 
392.2012 Aug 17 15:55  
391.2012 Jul 19 04:25    
390.2012 Jun 19 15:03 
389.2012 May 20 23:48  
388.2012 Apr 21 07:20 
387.2012 Mar 22 14:39  
386.2012 Feb 21 22:37    
385.2012 Jan 23 07:42 
384.2011 Dec 24 18:08 
383.2011 Nov 25 06:11  
382.2011 Oct 26 19:57 
381.2011 Sep 27 11:09 
380.2011 Aug 29 03:04    
379.2011 Jul 30 18:40  
378.2011 Jul 01 08:54 
377.2011 Jun 01 21:03  
376.2011 May 03 06:51  
375.2011 Apr 03 14:34 
374.2011 Mar 04 20:48  
373.2011 Feb 03 02:33   
372.2011 Jan 04 09:05 
371.2010 Dec 05 17:37 
370.2010 Nov 06 04:52 
369.2010 Oct 07 18:45 
368.2010 Sep 08 10:30 
367.2010 Aug 10 03:09 
366.2010 Jul 11 19:41 
365.2010 Jun 12 11:16   
364.2010 May 14 01:06 
363.2010 Apr 14 12:31 
362.2010 Mar 15 21:03   
361.2010 Feb 14 02:53 
360.2010 Jan 15 07:13 
359.2009 Dec 16 12:03   
358.2009 Nov 16 19:14 
357.2009 Oct 18 05:33 
356.2009 Sep 18 18:45   
355.2009 Aug 20 10:02 
354.2009 Jul 22 02:35  
353.2009 Jun 22 19:36 
352.2009 May 24 12:12   
351.2009 Apr 25 03:24   
350.2009 Mar 26 16:08 
349.2009 Feb 25 01:37  
348.2009 Jan 26 07:56    
347.2008 Dec 27 12:24 
346.2008 Nov 27 16:56 
345.2008 Oct 28 23:15  
344.2008 Sep 29 08:13  
343.2008 Aug 30 19:59 
342.2008 Aug 01 10:14   
341.2008 Jul 03 02:20   
340.2008 Jun 03 19:24    
339.2008 May 05 12:19  
338.2008 Apr 06 03:56 
337.2008 Mar 07 17:15  
336.2008 Feb 07 03:45  
335.2008 Jan 08 11:38 
334.2007 Dec 09 17:41 
333.2007 Nov 09 23:04   
332.2007 Oct 11 05:02 
331.2007 Sep 11 12:45  
330.2007 Aug 12 23:04  
329.2007 Jul 14 12:05 
328.2007 Jun 15 03:15 
327.2007 May 16 19:29 
326.2007 Apr 17 11:38 
325.2007 Mar 19 02:44   
324.2007 Feb 17 16:15  
323.2007 Jan 19 04:01 
322.2006 Dec 20 14:01  
321.2006 Nov 20 22:18  
320.2006 Oct 22 05:15 
319.2006 Sep 22 11:46  
318.2006 Aug 23 19:11  
317.2006 Jul 25 04:32  
316.2006 Jun 25 16:07   
315.2006 May 27 05:28 
314.2006 Apr 27 19:46 
313.2006 Mar 29 10:18  
312.2006 Feb 28 00:33 
311.2006 Jan 29 14:16 
310.2005 Dec 31 03:12 
309.2005 Dec 01 15:00 
308.2005 Nov 02 01:24 
307.2005 Oct 03 10:28 
306.2005 Sep 03 18:46   
305.2005 Aug 05 03:06 
304.2005 Jul 06 12:05  
303.2005 Jun 06 21:58 
302.2005 May 08 08:49 
301.2005 Apr 08 20:35 
300.2005 Mar 10 09:13 
299.2005 Feb 08 22:30 
298.2005 Jan 10 12:04   
297.2004 Dec 12 01:29 
296.2004 Nov 12 14:27 
295.2004 Oct 14 02:48  
294.2004 Sep 14 14:29 
293.2004 Aug 16 01:24 
292.2004 Jul 17 11:25  
291.2004 Jun 17 20:29 
290.2004 May 19 04:55 
289.2004 Apr 19 13:24 
288.2004 Mar 20 22:45 
287.2004 Feb 20 09:21 
286.2004 Jan 21 21:08 
285.2003 Dec 23 09:45  
284.2003 Nov 23 23:00   
283.2003 Oct 25 12:51 
282.2003 Sep 26 03:09  
281.2003 Aug 27 17:27 
280.2003 Jul 29 06:53 
279.2003 Jun 29 18:40 
278.2003 May 31 04:21 
277.2003 May 01 12:16 
276.2003 Apr 01 19:21 
275.2003 Mar 03 02:37 
274.2003 Feb 01 10:51  
273.2003 Jan 02 20:25 
272.2002 Dec 04 07:36 
271.2002 Nov 04 20:36    
270.2002 Oct 06 11:18 
269.2002 Sep 07 03:11 
268.2002 Aug 08 19:16  
267.2002 Jul 10 10:27  
266.2002 Jun 10 23:48 
265.2002 May 12 10:47 
264.2002 Apr 12 19:23  
263.2002 Mar 14 02:05  
262.2002 Feb 12 07:43  
261.2002 Jan 13 13:31 
260.2001 Dec 14 20:49 
259.2001 Nov 15 06:41    
258.2001 Oct 16 19:24  
257.2001 Sep 17 10:28 
256.2001 Aug 19 02:56  
255.2001 Jul 20 19:46 
254.2001 Jun 21 11:59    
253.2001 May 23 02:48  
252.2001 Apr 23 15:28  
251.2001 Mar 25 01:24  
250.2001 Feb 23 08:23  
249.2001 Jan 24 13:09  
248.2000 Dec 25 17:24 
247.2000 Nov 25 23:13 
246.2000 Oct 27 07:59  
245.2000 Sep 27 19:54 
244.2000 Aug 29 10:21 
243.2000 Jul 31 02:27 
242.2000 Jul 01 19:22   
241.2000 Jun 02 12:16 
240.2000 May 04 04:14 
239.2000 Apr 04 18:15  
238.2000 Mar 06 05:19  
237.2000 Feb 05 13:05 
236.2000 Jan 06 18:15''')

moon00co=('''236.2000 Jan 06 18:15
470.2018 Dec 07 07:22
237.2000 Feb 05 13:05
469.2018 Nov 07 16:03
238.2000 Mar 06 05:19
468.2018 Oct 09 03:48
239.2000 Apr 04 18:15
467.2018 Sep 09 18:03
240.2000 May 04 04:14  
466.2018 Aug 11 09:59
241.2000 Jun 02 12:16 
465.2018 Jul 13 02:50
242.2000 Jul 01 19:22
464.2018 Jun 13 19:45
243.2000 Jul 31 02:27
463.2018 May 15 11:50
244.2000 Aug 29 10:21
462.2018 Apr 16 02:00
245.2000 Sep 27 19:54
461.2018 Mar 17 13:14
246.2000 Oct 27 07:59
460.2018 Feb 15 21:07
247.2000 Nov 25 23:13
459.2018 Jan 17 02:18
248.2000 Dec 25 17:24
458.2017 Dec 18 06:31
249.2001 Jan 24 13:09
457.2017 Nov 18 11:43
250.2001 Feb 23 08:23
456.2017 Oct 19 19:13
251.2001 Mar 25 01:24
455.2017 Sep 20 05:31  
252.2001 Apr 23 15:28
454.2017 Aug 21 18:32
253.2001 May 23 02:48  
453.2017 Jul 23 09:47  
254.2001 Jun 21 11:59  
452.2017 Jun 24 02:33  
255.2001 Jul 20 19:46 
451.2017 May 25 19:46
256.2001 Aug 19 02:56  
450.2017 Apr 26 12:18  
257.2001 Sep 17 10:28  
449.2017 Mar 28 02:59  
258.2001 Oct 16 19:24  
448.2017 Feb 26 15:00 
259.2001 Nov 15 06:41  
447.2017 Jan 28 00:08    
260.2001 Dec 14 20:49  
446.2016 Dec 29 06:54 
261.2002 Jan 13 13:31  
445.2016 Nov 29 12:20  
262.2002 Feb 12 07:43  
444.2016 Oct 30 17:40  
263.2002 Mar 14 02:05  
443.2016 Oct 01 00:13 
264.2002 Apr 12 19:23  
442.2016 Sep 01 09:05  
265.2002 May 12 10:47  
441.2016 Aug 02 20:47 
266.2002 Jun 10 23:48  
440.2016 Jul 04 11:03  
267.2002 Jul 10 10:27  
439.2016 Jun 05 03:02  
268.2002 Aug 08 19:16  
438.2016 May 06 19:31 
269.2002 Sep 07 03:11  
437.2016 Apr 07 11:25  
270.2002 Oct 06 11:18  
436.2016 Mar 09 01:56    
271.2002 Nov 04 20:36  
435.2016 Feb 08 14:40  
272.2002 Dec 04 07:36 
434.2016 Jan 10 01:31  
273.2003 Jan 02 20:25  
433.2015 Dec 11 10:30  
274.2003 Feb 01 10:51  
432.2015 Nov 11 17:48  
275.2003 Mar 03 02:37  
431.2015 Oct 13 00:07  
276.2003 Apr 01 19:21  
430.2015 Sep 13 06:43  
277.2003 May 01 12:16  
429.2015 Aug 14 14:55  
278.2003 May 31 04:21  
428.2015 Jul 16 01:26  
279.2003 Jun 29 18:40  
427.2015 Jun 16 14:08  
280.2003 Jul 29 06:53  
426.2015 May 18 04:16    
281.2003 Aug 27 17:27 
425.2015 Apr 18 18:59  
282.2003 Sep 26 03:09 
424.2015 Mar 20 09:39 
283.2003 Oct 25 12:51 
423.2015 Feb 18 23:49  
284.2003 Nov 23 23:00  
422.2015 Jan 20 13:15  
285.2003 Dec 23 09:45  
421.2014 Dec 22 01:36  
286.2004 Jan 21 21:08  
420.2014 Nov 22 12:32  
287.2004 Feb 20 09:21  
419.2014 Oct 23 21:56  
288.2004 Mar 20 22:45  
418.2014 Sep 24 06:14  
289.2004 Apr 19 13:24  
417.2014 Aug 25 14:13  
290.2004 May 19 04:55  
416.2014 Jul 26 22:43  
291.2004 Jun 17 20:29  
415.2014 Jun 27 08:11  
292.2004 Jul 17 11:25  
414.2014 May 28 18:43  
293.2004 Aug 16 01:24  
413.2014 Apr 29 06:18  
294.2004 Sep 14 14:29  
412.2014 Mar 30 18:48  
295.2004 Oct 14 02:48  
411.2014 Mar 01 08:03  
296.2004 Nov 12 14:27    
410.2014 Jan 30 21:41  
297.2004 Dec 12 01:29  
409.2014 Jan 01 11:15  
298.2005 Jan 10 12:04  
408.2013 Dec 03 00:22  
299.2005 Feb 08 22:30  
407.2013 Nov 03 12:50  
300.2005 Mar 10 09:13  
406.2013 Oct 05 00:34  
301.2005 Apr 08 20:35  
405.2013 Sep 05 11:36  
302.2005 May 08 08:49  
404.2013 Aug 06 21:52  
303.2005 Jun 06 21:58  
403.2013 Jul 08 07:16  
304.2005 Jul 06 12:05  
402.2013 Jun 08 15:59  
305.2005 Aug 05 03:06  
401.2013 May 10 00:32  
306.2005 Sep 03 18:46  
400.2013 Apr 10 09:39  
307.2005 Oct 03 10:28  
399.2013 Mar 11 19:54  
308.2005 Nov 02 01:24  
398.2013 Feb 10 07:23  
309.2005 Dec 01 15:00  
397.2013 Jan 11 19:45  
310.2005 Dec 31 03:12  
396.2012 Dec 13 08:42  
311.2006 Jan 29 14:16  
395.2012 Nov 13 22:08  
312.2006 Feb 28 00:33    
394.2012 Oct 15 12:03 
313.2006 Mar 29 10:18  
393.2012 Sep 16 02:11  
314.2006 Apr 27 19:46  
392.2012 Aug 17 15:55  
315.2006 May 27 05:28  
391.2012 Jul 19 04:25  
316.2006 Jun 25 16:07  
390.2012 Jun 19 15:03  
317.2006 Jul 25 04:32  
389.2012 May 20 23:48  
318.2006 Aug 23 19:11  
388.2012 Apr 21 07:20  
319.2006 Sep 22 11:46  
387.2012 Mar 22 14:39  
320.2006 Oct 22 05:15  
386.2012 Feb 21 22:37  
321.2006 Nov 20 22:18  
385.2012 Jan 23 07:42  
322.2006 Dec 20 14:01  
384.2011 Dec 24 18:08  
323.2007 Jan 19 04:01  
383.2011 Nov 25 06:11 
324.2007 Feb 17 16:15  
382.2011 Oct 26 19:57  
325.2007 Mar 19 02:44  
381.2011 Sep 27 11:09  
326.2007 Apr 17 11:38  
380.2011 Aug 29 03:04  
327.2007 May 16 19:29  
379.2011 Jul 30 18:40    
328.2007 Jun 15 03:15  
378.2011 Jul 01 08:54  
329.2007 Jul 14 12:05  
377.2011 Jun 01 21:03  
330.2007 Aug 12 23:04 
376.2011 May 03 06:51  
331.2007 Sep 11 12:45  
375.2011 Apr 03 14:34  
332.2007 Oct 11 05:02  
374.2011 Mar 04 20:48  
333.2007 Nov 09 23:04  
373.2011 Feb 03 02:33 
334.2007 Dec 09 17:41  
372.2011 Jan 04 09:05  
335.2008 Jan 08 11:38  
371.2010 Dec 05 17:37  
336.2008 Feb 07 03:45  
370.2010 Nov 06 04:52  
337.2008 Mar 07 17:15  
369.2010 Oct 07 18:45  
338.2008 Apr 06 03:56  
368.2010 Sep 08 10:30  
339.2008 May 05 12:19  
367.2010 Aug 10 03:09  
340.2008 Jun 03 19:24  
366.2010 Jul 11 19:41  
341.2008 Jul 03 02:20 
365.2010 Jun 12 11:16  
342.2008 Aug 01 10:14  
364.2010 May 14 01:06  
343.2008 Aug 30 19:59  
363.2010 Apr 14 12:31  
344.2008 Sep 29 08:13  
362.2010 Mar 15 21:03  
345.2008 Oct 28 23:15  
361.2010 Feb 14 02:53   
346.2008 Nov 27 16:56 
360.2010 Jan 15 07:13  
347.2008 Dec 27 12:24  
359.2009 Dec 16 12:03  
348.2009 Jan 26 07:56  
358.2009 Nov 16 19:14 
349.2009 Feb 25 01:37  
357.2009 Oct 18 05:33  
350.2009 Mar 26 16:08  
356.2009 Sep 18 18:45 
351.2009 Apr 25 03:24  
355.2009 Aug 20 10:02  
352.2009 May 24 12:12  
354.2009 Jul 22 02:35  
353.2009 Jun 22 19:36 
353.2009 Jun 22 19:36  
354.2009 Jul 22 02:35  
352.2009 May 24 12:12 
355.2009 Aug 20 10:02  
351.2009 Apr 25 03:24 
356.2009 Sep 18 18:45  
350.2009 Mar 26 16:08  
357.2009 Oct 18 05:33 
349.2009 Feb 25 01:37  
358.2009 Nov 16 19:14  
348.2009 Jan 26 07:56  
359.2009 Dec 16 12:03    
347.2008 Dec 27 12:24 
360.2010 Jan 15 07:13 
346.2008 Nov 27 16:56  
361.2010 Feb 14 02:53  
345.2008 Oct 28 23:15 
362.2010 Mar 15 21:03  
344.2008 Sep 29 08:13  
363.2010 Apr 14 12:31  
343.2008 Aug 30 19:59  
364.2010 May 14 01:06  
342.2008 Aug 01 10:14  
365.2010 Jun 12 11:16  
341.2008 Jul 03 02:20  
366.2010 Jul 11 19:41  
340.2008 Jun 03 19:24  
367.2010 Aug 10 03:09  
339.2008 May 05 12:19  
368.2010 Sep 08 10:30 
338.2008 Apr 06 03:56  
369.2010 Oct 07 18:45  
337.2008 Mar 07 17:15    
370.2010 Nov 06 04:52  
336.2008 Feb 07 03:45  
371.2010 Dec 05 17:37  
335.2008 Jan 08 11:38  
372.2011 Jan 04 09:05 
334.2007 Dec 09 17:41  
373.2011 Feb 03 02:33  
333.2007 Nov 09 23:04  
374.2011 Mar 04 20:48  
332.2007 Oct 11 05:02  
375.2011 Apr 03 14:34  
331.2007 Sep 11 12:45  
376.2011 May 03 06:51 
330.2007 Aug 12 23:04  
377.2011 Jun 01 21:03  
329.2007 Jul 14 12:05  
378.2011 Jul 01 08:54  
328.2007 Jun 15 03:15  
379.2011 Jul 30 18:40  
327.2007 May 16 19:29  
380.2011 Aug 29 03:04  
326.2007 Apr 17 11:38 
381.2011 Sep 27 11:09  
325.2007 Mar 19 02:44  
382.2011 Oct 26 19:57 
324.2007 Feb 17 16:15  
383.2011 Nov 25 06:11    
323.2007 Jan 19 04:01    
384.2011 Dec 24 18:08 
322.2006 Dec 20 14:01  
385.2012 Jan 23 07:42 
321.2006 Nov 20 22:18  
386.2012 Feb 21 22:37  
320.2006 Oct 22 05:15  
387.2012 Mar 22 14:39  
319.2006 Sep 22 11:46  
388.2012 Apr 21 07:20  
318.2006 Aug 23 19:11  
389.2012 May 20 23:48  
317.2006 Jul 25 04:32  
390.2012 Jun 19 15:03  
316.2006 Jun 25 16:07 
391.2012 Jul 19 04:25  
315.2006 May 27 05:28  
392.2012 Aug 17 15:55  
314.2006 Apr 27 19:46  
393.2012 Sep 16 02:11  
313.2006 Mar 29 10:18  
394.2012 Oct 15 12:03  
312.2006 Feb 28 00:33    
395.2012 Nov 13 22:08  
311.2006 Jan 29 14:16 
396.2012 Dec 13 08:42 
310.2005 Dec 31 03:12 
397.2013 Jan 11 19:45  
309.2005 Dec 01 15:00
398.2013 Feb 10 07:23 
308.2005 Nov 02 01:24 
399.2013 Mar 11 19:54 
307.2005 Oct 03 10:28  
400.2013 Apr 10 09:39 
306.2005 Sep 03 18:46 
401.2013 May 10 00:32 
305.2005 Aug 05 03:06    
402.2013 Jun 08 15:59  
304.2005 Jul 06 12:05 
403.2013 Jul 08 07:16 
303.2005 Jun 06 21:58  
404.2013 Aug 06 21:52  
302.2005 May 08 08:49  
405.2013 Sep 05 11:36    
301.2005 Apr 08 20:35  
406.2013 Oct 05 00:34  
300.2005 Mar 10 09:13 
407.2013 Nov 03 12:50 
299.2005 Feb 08 22:30 
408.2013 Dec 03 00:22 
298.2005 Jan 10 12:04  
409.2014 Jan 01 11:15 
297.2004 Dec 12 01:29  
410.2014 Jan 30 21:41 
296.2004 Nov 12 14:27  
411.2014 Mar 01 08:03    
295.2004 Oct 14 02:48 
412.2014 Mar 30 18:48 
294.2004 Sep 14 14:29 
413.2014 Apr 29 06:18 
293.2004 Aug 16 01:24  
414.2014 May 28 18:43 
292.2004 Jul 17 11:25 
415.2014 Jun 27 08:11 
291.2004 Jun 17 20:29 
416.2014 Jul 26 22:43 
290.2004 May 19 04:55
417.2014 Aug 25 14:13     
289.2004 Apr 19 13:24  
418.2014 Sep 24 06:14   
288.2004 Mar 20 22:45  
419.2014 Oct 23 21:56  
287.2004 Feb 20 09:21  
420.2014 Nov 22 12:32  
286.2004 Jan 21 21:08  
421.2014 Dec 22 01:36  
285.2003 Dec 23 09:45  
422.2015 Jan 20 13:15  
284.2003 Nov 23 23:00  
423.2015 Feb 18 23:49 
283.2003 Oct 25 12:51  
424.2015 Mar 20 09:39  
282.2003 Sep 26 03:09  
425.2015 Apr 18 18:59  
281.2003 Aug 27 17:27  
426.2015 May 18 04:16  
280.2003 Jul 29 06:53  
427.2015 Jun 16 14:08  
279.2003 Jun 29 18:40  
428.2015 Jul 16 01:26 
278.2003 May 31 04:21
429.2015 Aug 14 14:55   
277.2003 May 01 12:16  
430.2015 Sep 13 06:43  
276.2003 Apr 01 19:21  
431.2015 Oct 13 00:07   
275.2003 Mar 03 02:37    
432.2015 Nov 11 17:48   
274.2003 Feb 01 10:51    
433.2015 Dec 11 10:30   
273.2003 Jan 02 20:25      
434.2016 Jan 10 01:31  
272.2002 Dec 04 07:36  
435.2016 Feb 08 14:40    
271.2002 Nov 04 20:36  
436.2016 Mar 09 01:56
270.2002 Oct 06 11:18
437.2016 Apr 07 11:25  
269.2002 Sep 07 03:11  
438.2016 May 06 19:31  
268.2002 Aug 08 19:16  
439.2016 Jun 05 03:02 
267.2002 Jul 10 10:27  
440.2016 Jul 04 11:03   
266.2002 Jun 10 23:48  
441.2016 Aug 02 20:47 
265.2002 May 12 10:47  
442.2016 Sep 01 09:05 
264.2002 Apr 12 19:23  
443.2016 Oct 01 00:13 
263.2002 Mar 14 02:05  
444.2016 Oct 30 17:40  
262.2002 Feb 12 07:43 
445.2016 Nov 29 12:20 
261.2002 Jan 13 13:31  
446.2016 Dec 29 06:54  
260.2001 Dec 14 20:49 
447.2017 Jan 28 00:08  
259.2001 Nov 15 06:41  
448.2017 Feb 26 15:00  
258.2001 Oct 16 19:24  
449.2017 Mar 28 02:59 
257.2001 Sep 17 10:28   
450.2017 Apr 26 12:18 
256.2001 Aug 19 02:56  
451.2017 May 25 19:46 
255.2001 Jul 20 19:46  
452.2017 Jun 24 02:33  
254.2001 Jun 21 11:59  
453.2017 Jul 23 09:47 
253.2001 May 23 02:48
454.2017 Aug 21 18:32  
252.2001 Apr 23 15:28  
455.2017 Sep 20 05:31  
251.2001 Mar 25 01:24  
456.2017 Oct 19 19:13  
250.2001 Feb 23 08:23 
457.2017 Nov 18 11:43  
249.2001 Jan 24 13:09  
458.2017 Dec 18 06:31 
248.2000 Dec 25 17:24  
459.2018 Jan 17 02:18  
247.2000 Nov 25 23:13 
460.2018 Feb 15 21:07  
246.2000 Oct 27 07:59  
461.2018 Mar 17 13:14    
245.2000 Sep 27 19:54  
462.2018 Apr 16 02:00  
244.2000 Aug 29 10:21  
463.2018 May 15 11:50  
243.2000 Jul 31 02:27  
464.2018 Jun 13 19:45  
242.2000 Jul 01 19:22  
465.2018 Jul 13 02:50 
241.2000 Jun 02 12:16  
466.2018 Aug 11 09:59  
240.2000 May 04 04:14  
467.2018 Sep 09 18:03  
239.2000 Apr 04 18:15  
468.2018 Oct 09 03:48 
238.2000 Mar 06 05:19  
469.2018 Nov 07 16:03 
237.2000 Feb 05 13:05  
470.2018 Dec 07 07:22  
236.2000 Jan 06 18:15''')

moon19=('''471.2019 Jan 06 01:30
472.2019 Feb 04 21:05
473.2019 Mar 06 16:05
474.2019 Apr 05 08:52
475.2019 May 04 22:47  
476.2019 Jun 03 10:03
477.2019 Jul 02 19:17
478.2019 Aug 01 03:13
479.2019 Aug 30 10:38
480.2019 Sep 28 18:28
481.2019 Oct 28 03:40
482.2019 Nov 26 15:08
483.2019 Dec 26 05:16
484.2020 Jan 24 21:44
485.2020 Feb 23 15:34
486.2020 Mar 24 09:30
487.2020 Apr 23 02:27
488.2020 May 22 17:40
489.2020 Jun 21 06:42
490.2020 Jul 20 17:34
491.2020 Aug 19 02:42
492.2020 Sep 17 11:01
493.2020 Oct 16 19:32
494.2020 Nov 15 05:09
495.2020 Dec 14 16:19
496.2021 Jan 13 05:03
497.2021 Feb 11 19:08
498.2021 Mar 13 10:24    
499.2021 Apr 12 02:33
500.2021 May 11 19:02
501.2021 Jun 10 10:54
502.2021 Jul 10 01:18
503.2021 Aug 08 13:51
504.2021 Sep 07 00:52
505.2021 Oct 06 11:06
506.2021 Nov 04 21:15
507.2021 Dec 04 07:45
508.2022 Jan 02 18:36
509.2022 Feb 01 05:49
510.2022 Mar 02 17:38
511.2022 Apr 01 06:28
512.2022 Apr 30 20:31
513.2022 May 30 11:32
514.2022 Jun 29 02:53
515.2022 Jul 28 17:55  
516.2022 Aug 27 08:17
517.2022 Sep 25 21:54
518.2022 Oct 25 10:48
519.2022 Nov 23 22:57
520.2022 Dec 23 10:18
521.2023 Jan 21 20:56
522.2023 Feb 20 07:09
523.2023 Mar 21 17:27
524.2023 Apr 20 04:16
525.2023 May 19 15:56
526.2023 Jun 18 04:39
527.2023 Jul 17 18:33
528.2023 Aug 16 09:39
529.2023 Sep 15 01:40
530.2023 Oct 14 17:55
531.2023 Nov 13 09:27
532.2023 Dec 12 23:32
533.2024 Jan 11 11:58
534.2024 Feb 09 23:01
535.2024 Mar 10 09:03
536.2024 Apr 08 18:23  
537.2024 May 08 03:24
538.2024 Jun 06 12:40
539.2024 Jul 05 22:59
540.2024 Aug 04 11:14
541.2024 Sep 03 01:57
542.2024 Oct 02 18:51
543.2024 Nov 01 12:48
544.2024 Dec 01 06:22
545.2024 Dec 30 22:28
546.2025 Jan 29 12:37
547.2025 Feb 28 00:47
548.2025 Mar 29 11:00
549.2025 Apr 27 19:33
550.2025 May 27 03:04
551.2025 Jun 25 10:34
552.2025 Jul 24 19:12
553.2025 Aug 23 06:07
554.2025 Sep 21 19:55
555.2025 Oct 21 12:26
556.2025 Nov 20 06:48
557.2025 Dec 20 01:44
558.2026 Jan 18 19:53  
559.2026 Feb 17 12:03
560.2026 Mar 19 01:26
561.2026 Apr 17 11:54
562.2026 May 16 20:03
563.2026 Jun 15 02:56
564.2026 Jul 14 09:45
565.2026 Aug 12 17:38
566.2026 Sep 11 03:27
567.2026 Oct 10 15:50
568.2026 Nov 09 07:03
569.2026 Dec 09 00:53
570.2027 Jan 07 20:25
571.2027 Feb 06 15:57
572.2027 Mar 08 09:31
573.2027 Apr 06 23:54
574.2027 May 06 11:00
575.2027 Jun 04 19:42
576.2027 Jul 04 03:03
577.2027 Aug 02 10:06
578.2027 Aug 31 17:42
579.2027 Sep 30 02:37  
580.2027 Oct 29 13:37
581.2027 Nov 28 03:25
582.2027 Dec 27 20:14
583.2028 Jan 26 15:14
584.2028 Feb 25 10:39
585.2028 Mar 26 04:33
586.2028 Apr 24 19:49
587.2028 May 24 08:18
588.2028 Jun 22 18:29
589.2028 Jul 22 03:03
590.2028 Aug 20 10:45
591.2028 Sep 18 18:25
592.2028 Oct 18 02:57
593.2028 Nov 16 13:19
594.2028 Dec 16 02:07
595.2029 Jan 14 17:26
596.2029 Feb 13 10:33
597.2029 Mar 15 04:21
598.2029 Apr 13 21:42
599.2029 May 13 13:44
600.2029 Jun 12 03:52
601.2029 Jul 11 15:52
602.2029 Aug 10 01:57
603.2029 Sep 08 10:45
604.2029 Oct 07 19:15
605.2029 Nov 06 04:25
606.2029 Dec 05 14:53
607.2030 Jan 04 02:51
608.2030 Feb 02 16:10  
609.2030 Mar 04 06:37
610.2030 Apr 02 22:05
611.2030 May 02 14:14
612.2030 Jun 01 06:22
613.2030 Jun 30 21:35
614.2030 Jul 30 11:11
615.2030 Aug 28 23:07
616.2030 Sep 27 09:55
617.2030 Oct 26 20:17
618.2030 Nov 25 06:47
619.2030 Dec 24 17:33
620.2031 Jan 23 04:33
621.2031 Feb 21 15:52
622.2031 Mar 23 03:52
623.2031 Apr 21 17:00
624.2031 May 21 07:20
625.2031 Jun 19 22:27
626.2031 Jul 19 13:41
627.2031 Aug 18 04:33
628.2031 Sep 16 18:47
629.2031 Oct 16 08:21
630.2031 Nov 14 21:10
631.2031 Dec 14 09:06
632.2032 Jan 12 20:07
633.2032 Feb 11 06:26
634.2032 Mar 11 16:27
635.2032 Apr 10 02:42
636.2032 May 09 13:38
637.2032 Jun 08 01:35
638.2032 Jul 07 14:44
639.2032 Aug 06 05:13  
640.2032 Sep 04 20:58
641.2032 Oct 04 13:27
642.2032 Nov 03 05:45
643.2032 Dec 02 20:53
644.2033 Jan 01 10:18
645.2033 Jan 30 22:01
646.2033 Mar 01 08:25
647.2033 Mar 30 17:54
648.2033 Apr 29 02:48
649.2033 May 28 11:39
650.2033 Jun 26 21:09
651.2033 Jul 26 08:14
652.2033 Aug 24 21:41
653.2033 Sep 23 13:41
654.2033 Oct 23 07:29
655.2033 Nov 22 01:40
656.2033 Dec 21 18:48
657.2034 Jan 20 10:03
658.2034 Feb 18 23:12
659.2034 Mar 20 10:17
660.2034 Apr 18 19:28
661.2034 May 18 03:14
662.2034 Jun 16 10:27
663.2034 Jul 15 18:17
664.2034 Aug 14 03:54
665.2034 Sep 12 16:15
666.2034 Oct 12 07:34
667.2034 Nov 11 01:18
668.2034 Dec 10 20:16
669.2035 Jan 09 15:05
670.2035 Feb 08 08:24
671.2035 Mar 09 23:12  
672.2035 Apr 08 11:00
673.2035 May 07 20:05
674.2035 Jun 06 03:22
675.2035 Jul 05 10:00
676.2035 Aug 03 17:13
677.2035 Sep 02 02:01
678.2035 Oct 01 13:08
679.2035 Oct 31 03:00
680.2035 Nov 29 19:39
681.2035 Dec 29 14:33
682.2036 Jan 28 10:19
683.2036 Feb 27 05:02
684.2036 Mar 27 21:00
685.2036 Apr 26 09:36
686.2036 May 25 19:19
687.2036 Jun 24 03:11
688.2036 Jul 23 10:19
689.2036 Aug 21 17:36
690.2036 Sep 20 01:53
691.2036 Oct 19 11:51
692.2036 Nov 18 00:15
693.2036 Dec 17 15:36  
694.2037 Jan 16 09:36
695.2037 Feb 15 04:56
696.2037 Mar 16 23:39
697.2037 Apr 15 16:11
698.2037 May 15 05:57
699.2037 Jun 13 17:12
700.2037 Jul 13 02:33
701.2037 Aug 11 10:43
702.2037 Sep 09 18:26
703.2037 Oct 09 02:36
704.2037 Nov 07 12:05
705.2037 Dec 06 23:40''')

moon19r=('''705.2037 Dec 06 23:40
704.2037 Nov 07 12:05
703.2037 Oct 09 02:36
702.2037 Sep 09 18:26
701.2037 Aug 11 10:43
700.2037 Jul 13 02:33
699.2037 Jun 13 17:12
698.2037 May 15 05:57  
697.2037 Apr 15 16:11
696.2037 Mar 16 23:39
695.2037 Feb 15 04:56
694.2037 Jan 16 09:36
693.2036 Dec 17 15:36
692.2036 Nov 18 00:15
691.2036 Oct 19 11:51 
690.2036 Sep 20 01:53
689.2036 Aug 21 17:36
688.2036 Jul 23 10:19
687.2036 Jun 24 03:11
686.2036 May 25 19:19
685.2036 Apr 26 09:36
684.2036 Mar 27 21:00 
683.2036 Feb 27 05:02
682.2036 Jan 28 10:19
681.2035 Dec 29 14:33
680.2035 Nov 29 19:39
679.2035 Oct 31 03:00
678.2035 Oct 01 13:08
677.2035 Sep 02 02:01
676.2035 Aug 03 17:13
675.2035 Jul 05 10:00
674.2035 Jun 06 03:22
673.2035 May 07 20:05
672.2035 Apr 08 11:00
671.2035 Mar 09 23:12  
670.2035 Feb 08 08:24
669.2035 Jan 09 15:05  
668.2034 Dec 10 20:16  
667.2034 Nov 11 01:18 
666.2034 Oct 12 07:34  
665.2034 Sep 12 16:15 
664.2034 Aug 14 03:54  
663.2034 Jul 15 18:17 
662.2034 Jun 16 10:27 
661.2034 May 18 03:14  
660.2034 Apr 18 19:28 
659.2034 Mar 20 10:17 
658.2034 Feb 18 23:12  
657.2034 Jan 20 10:03 
656.2033 Dec 21 18:48 
655.2033 Nov 22 01:40 
654.2033 Oct 23 07:29 
653.2033 Sep 23 13:41  
652.2033 Aug 24 21:41 
651.2033 Jul 26 08:14 
650.2033 Jun 26 21:09 
649.2033 May 28 11:39 
648.2033 Apr 29 02:48  
647.2033 Mar 30 17:54   
646.2033 Mar 01 08:25 
645.2033 Jan 30 22:01 
644.2033 Jan 01 10:18 
643.2032 Dec 02 20:53 
642.2032 Nov 03 05:45 
641.2032 Oct 04 13:27 
640.2032 Sep 04 20:58 
639.2032 Aug 06 05:13 
638.2032 Jul 07 14:44 
637.2032 Jun 08 01:35 
636.2032 May 09 13:38 
635.2032 Apr 10 02:42 
634.2032 Mar 11 16:27 
633.2032 Feb 11 06:26 
632.2032 Jan 12 20:07 
631.2031 Dec 14 09:06 
630.2031 Nov 14 21:10 
629.2031 Oct 16 08:21 
628.2031 Sep 16 18:47 
627.2031 Aug 18 04:33 
626.2031 Jul 19 13:41 
625.2031 Jun 19 22:27 
624.2031 May 21 07:20 
623.2031 Apr 21 17:00  
622.2031 Mar 23 03:52 
621.2031 Feb 21 15:52 
620.2031 Jan 23 04:33  
619.2030 Dec 24 17:33   
618.2030 Nov 25 06:47  
617.2030 Oct 26 20:17 
616.2030 Sep 27 09:55  
615.2030 Aug 28 23:07 
614.2030 Jul 30 11:11  
613.2030 Jun 30 21:35 
612.2030 Jun 01 06:22  
611.2030 May 02 14:14  
610.2030 Apr 02 22:05  
609.2030 Mar 04 06:37 
608.2030 Feb 02 16:10  
607.2030 Jan 04 02:51 
606.2029 Dec 05 14:53 
605.2029 Nov 06 04:25 
604.2029 Oct 07 19:15   
603.2029 Sep 08 10:45  
602.2029 Aug 10 01:57  
601.2029 Jul 11 15:52  
600.2029 Jun 12 03:52    
599.2029 May 13 13:44  
598.2029 Apr 13 21:42  
597.2029 Mar 15 04:21 
596.2029 Feb 13 10:33  
595.2029 Jan 14 17:26 
594.2028 Dec 16 02:07   
593.2028 Nov 16 13:19 
592.2028 Oct 18 02:57  
591.2028 Sep 18 18:25 
590.2028 Aug 20 10:45  
589.2028 Jul 22 03:03 
588.2028 Jun 22 18:29  
587.2028 May 24 08:18  
586.2028 Apr 24 19:49 
585.2028 Mar 26 04:33 
584.2028 Feb 25 10:39  
583.2028 Jan 26 15:14 
582.2027 Dec 27 20:14 
581.2027 Nov 28 03:25 
580.2027 Oct 29 13:37 
579.2027 Sep 30 02:37  
578.2027 Aug 31 17:42 
577.2027 Aug 02 10:06  
576.2027 Jul 04 03:03  
575.2027 Jun 04 19:42    
574.2027 May 06 11:00 
573.2027 Apr 06 23:54  
572.2027 Mar 08 09:31 
571.2027 Feb 06 15:57  
570.2027 Jan 07 20:25 
569.2026 Dec 09 00:53  
568.2026 Nov 09 07:03 
567.2026 Oct 10 15:50  
566.2026 Sep 11 03:27 
565.2026 Aug 12 17:38  
564.2026 Jul 14 09:45  
563.2026 Jun 15 02:56 
562.2026 May 16 20:03  
561.2026 Apr 17 11:54 
560.2026 Mar 19 01:26 
559.2026 Feb 17 12:03  
558.2026 Jan 18 19:53 
557.2025 Dec 20 01:44  
556.2025 Nov 20 06:48  
555.2025 Oct 21 12:26 
554.2025 Sep 21 19:55  
553.2025 Aug 23 06:07 
552.2025 Jul 24 19:12  
551.2025 Jun 25 10:34 
550.2025 May 27 03:04  
549.2025 Apr 27 19:33    
548.2025 Mar 29 11:00 
547.2025 Feb 28 00:47 
546.2025 Jan 29 12:37  
545.2024 Dec 30 22:28  
544.2024 Dec 01 06:22 
543.2024 Nov 01 12:48 
542.2024 Oct 02 18:51 
541.2024 Sep 03 01:57  
540.2024 Aug 04 11:14 
539.2024 Jul 05 22:59  
538.2024 Jun 06 12:40 
537.2024 May 08 03:24  
536.2024 Apr 08 18:23 
535.2024 Mar 10 09:03    
534.2024 Feb 09 23:01 
533.2024 Jan 11 11:58 
532.2023 Dec 12 23:32 
531.2023 Nov 13 09:27 
530.2023 Oct 14 17:55 
529.2023 Sep 15 01:40 
528.2023 Aug 16 09:39 
527.2023 Jul 17 18:33 
526.2023 Jun 18 04:39 
525.2023 May 19 15:56 
524.2023 Apr 20 04:16 
523.2023 Mar 21 17:27  
522.2023 Feb 20 07:09  
521.2023 Jan 21 20:56 
520.2022 Dec 23 10:18  
519.2022 Nov 23 22:57 
518.2022 Oct 25 10:48 
517.2022 Sep 25 21:54  
516.2022 Aug 27 08:17 
515.2022 Jul 28 17:55 
514.2022 Jun 29 02:53 
513.2022 May 30 11:32 
512.2022 Apr 30 20:31   
511.2022 Apr 01 06:28  
510.2022 Mar 02 17:38 
509.2022 Feb 01 05:49 
508.2022 Jan 02 18:36 
507.2021 Dec 04 07:45 
506.2021 Nov 04 21:15 
505.2021 Oct 06 11:06 
504.2021 Sep 07 00:52 
503.2021 Aug 08 13:51  
502.2021 Jul 10 01:18  
501.2021 Jun 10 10:54  
500.2021 May 11 19:02  
499.2021 Apr 12 02:33  
498.2021 Mar 13 10:24 
497.2021 Feb 11 19:08 
496.2021 Jan 13 05:03 
495.2020 Dec 14 16:19  
494.2020 Nov 15 05:09 
493.2020 Oct 16 19:32 
492.2020 Sep 17 11:01   
491.2020 Aug 19 02:42  
490.2020 Jul 20 17:34 
489.2020 Jun 21 06:42 
488.2020 May 22 17:40 
487.2020 Apr 23 02:27 
486.2020 Mar 24 09:30  
485.2020 Feb 23 15:34  
484.2020 Jan 24 21:44  
483.2019 Dec 26 05:16  
482.2019 Nov 26 15:08    
481.2019 Oct 28 03:40  
480.2019 Sep 28 18:28  
479.2019 Aug 30 10:38  
478.2019 Aug 01 03:13  
477.2019 Jul 02 19:17  
476.2019 Jun 03 10:03  
475.2019 May 04 22:47  
474.2019 Apr 05 08:52  
473.2019 Mar 06 16:05  
472.2019 Feb 04 21:05 
471.2019 Jan 06 01:30''')

moon19co = ('''471.2019 Jan 06 01:30
705.2037 Dec 06 23:40
472.2019 Feb 04 21:05
704.2037 Nov 07 12:05
473.2019 Mar 06 16:05
703.2037 Oct 09 02:36
474.2019 Apr 05 08:52
702.2037 Sep 09 18:26
475.2019 May 04 22:47
701.2037 Aug 11 10:43
476.2019 Jun 03 10:03
700.2037 Jul 13 02:33
477.2019 Jul 02 19:17 
699.2037 Jun 13 17:12  
478.2019 Aug 01 03:13 
698.2037 May 15 05:57 
479.2019 Aug 30 10:38    
697.2037 Apr 15 16:11 
480.2019 Sep 28 18:28 
696.2037 Mar 16 23:39  
481.2019 Oct 28 03:40 
695.2037 Feb 15 04:56 
482.2019 Nov 26 15:08  
694.2037 Jan 16 09:36  
483.2019 Dec 26 05:16 
693.2036 Dec 17 15:36 
484.2020 Jan 24 21:44 
692.2036 Nov 18 00:15 
485.2020 Feb 23 15:34 
691.2036 Oct 19 11:51 
486.2020 Mar 24 09:30 
690.2036 Sep 20 01:53 
487.2020 Apr 23 02:27 
689.2036 Aug 21 17:36 
488.2020 May 22 17:40 
688.2036 Jul 23 10:19  
489.2020 Jun 21 06:42  
687.2036 Jun 24 03:11 
490.2020 Jul 20 17:34  
686.2036 May 25 19:19 
491.2020 Aug 19 02:42  
685.2036 Apr 26 09:36 
492.2020 Sep 17 11:01  
684.2036 Mar 27 21:00   
493.2020 Oct 16 19:32 
683.2036 Feb 27 05:02  
494.2020 Nov 15 05:09  
682.2036 Jan 28 10:19 
495.2020 Dec 14 16:19 
681.2035 Dec 29 14:33 
496.2021 Jan 13 05:03 
680.2035 Nov 29 19:39  
497.2021 Feb 11 19:08 
679.2035 Oct 31 03:00  
498.2021 Mar 13 10:24  
678.2035 Oct 01 13:08 
499.2021 Apr 12 02:33  
677.2035 Sep 02 02:01 
500.2021 May 11 19:02 
676.2035 Aug 03 17:13  
501.2021 Jun 10 10:54 
675.2035 Jul 05 10:00  
502.2021 Jul 10 01:18 
674.2035 Jun 06 03:22  
503.2021 Aug 08 13:51 
673.2035 May 07 20:05 
504.2021 Sep 07 00:52 
672.2035 Apr 08 11:00 
505.2021 Oct 06 11:06  
671.2035 Mar 09 23:12  
506.2021 Nov 04 21:15 
670.2035 Feb 08 08:24  
507.2021 Dec 04 07:45 
669.2035 Jan 09 15:05  
508.2022 Jan 02 18:36 
668.2034 Dec 10 20:16  
509.2022 Feb 01 05:49 
667.2034 Nov 11 01:18 
510.2022 Mar 02 17:38   
666.2034 Oct 12 07:34  
511.2022 Apr 01 06:28 
665.2034 Sep 12 16:15 
512.2022 Apr 30 20:31 
664.2034 Aug 14 03:54  
513.2022 May 30 11:32 
663.2034 Jul 15 18:17  
514.2022 Jun 29 02:53 
662.2034 Jun 16 10:27  
515.2022 Jul 28 17:55 
661.2034 May 18 03:14
516.2022 Aug 27 08:17  
660.2034 Apr 18 19:28 
517.2022 Sep 25 21:54  
659.2034 Mar 20 10:17  
518.2022 Oct 25 10:48 
658.2034 Feb 18 23:12  
519.2022 Nov 23 22:57 
657.2034 Jan 20 10:03  
520.2022 Dec 23 10:18  
656.2033 Dec 21 18:48 
521.2023 Jan 21 20:56  
655.2033 Nov 22 01:40  
522.2023 Feb 20 07:09 
654.2033 Oct 23 07:29 
523.2023 Mar 21 17:27  
653.2033 Sep 23 13:41  
524.2023 Apr 20 04:16  
652.2033 Aug 24 21:41 
525.2023 May 19 15:56 
651.2033 Jul 26 08:14    
526.2023 Jun 18 04:39 
650.2033 Jun 26 21:09  
527.2023 Jul 17 18:33 
649.2033 May 28 11:39 
528.2023 Aug 16 09:39 
648.2033 Apr 29 02:48  
529.2023 Sep 15 01:40 
647.2033 Mar 30 17:54 
530.2023 Oct 14 17:55  
646.2033 Mar 01 08:25 
531.2023 Nov 13 09:27 
645.2033 Jan 30 22:01  
532.2023 Dec 12 23:32 
644.2033 Jan 01 10:18  
533.2024 Jan 11 11:58 
643.2032 Dec 02 20:53  
534.2024 Feb 09 23:01 
642.2032 Nov 03 05:45 
535.2024 Mar 10 09:03 
641.2032 Oct 04 13:27 
536.2024 Apr 08 18:23 
640.2032 Sep 04 20:58 
537.2024 May 08 03:24 
639.2032 Aug 06 05:13 
538.2024 Jun 06 12:40 
638.2032 Jul 07 14:44 
539.2024 Jul 05 22:59 
637.2032 Jun 08 01:35 
540.2024 Aug 04 11:14 
636.2032 May 09 13:38 
541.2024 Sep 03 01:57   
635.2032 Apr 10 02:42 
542.2024 Oct 02 18:51 
634.2032 Mar 11 16:27 
543.2024 Nov 01 12:48 
633.2032 Feb 11 06:26 
544.2024 Dec 01 06:22 
632.2032 Jan 12 20:07 
545.2024 Dec 30 22:28 
631.2031 Dec 14 09:06 
546.2025 Jan 29 12:37 
630.2031 Nov 14 21:10 
547.2025 Feb 28 00:47 
629.2031 Oct 16 08:21 
548.2025 Mar 29 11:00  
628.2031 Sep 16 18:47  
549.2025 Apr 27 19:33 
627.2031 Aug 18 04:33 
550.2025 May 27 03:04 
626.2031 Jul 19 13:41 
551.2025 Jun 25 10:34 
625.2031 Jun 19 22:27  
552.2025 Jul 24 19:12  
624.2031 May 21 07:20 
553.2025 Aug 23 06:07  
623.2031 Apr 21 17:00   
554.2025 Sep 21 19:55 
622.2031 Mar 23 03:52 
555.2025 Oct 21 12:26  
621.2031 Feb 21 15:52  
556.2025 Nov 20 06:48 
620.2031 Jan 23 04:33 
557.2025 Dec 20 01:44 
619.2030 Dec 24 17:33 
558.2026 Jan 18 19:53 
618.2030 Nov 25 06:47 
559.2026 Feb 17 12:03  
617.2030 Oct 26 20:17 
560.2026 Mar 19 01:26  
616.2030 Sep 27 09:55 
561.2026 Apr 17 11:54 
615.2030 Aug 28 23:07 
562.2026 May 16 20:03 
614.2030 Jul 30 11:11 
563.2026 Jun 15 02:56 
613.2030 Jun 30 21:35 
564.2026 Jul 14 09:45  
612.2030 Jun 01 06:22 
565.2026 Aug 12 17:38 
611.2030 May 02 14:14 
566.2026 Sep 11 03:27 
610.2030 Apr 02 22:05   
567.2026 Oct 10 15:50 
609.2030 Mar 04 06:37 
568.2026 Nov 09 07:03 
608.2030 Feb 02 16:10 
569.2026 Dec 09 00:53 
607.2030 Jan 04 02:51  
570.2027 Jan 07 20:25 
606.2029 Dec 05 14:53 
571.2027 Feb 06 15:57 
605.2029 Nov 06 04:25 
572.2027 Mar 08 09:31 
604.2029 Oct 07 19:15 
573.2027 Apr 06 23:54 
603.2029 Sep 08 10:45 
574.2027 May 06 11:00 
602.2029 Aug 10 01:57 
575.2027 Jun 04 19:42 
601.2029 Jul 11 15:52 
576.2027 Jul 04 03:03 
600.2029 Jun 12 03:52 
577.2027 Aug 02 10:06 
599.2029 May 13 13:44 
578.2027 Aug 31 17:42 
598.2029 Apr 13 21:42 
579.2027 Sep 30 02:37 
597.2029 Mar 15 04:21 
580.2027 Oct 29 13:37 
596.2029 Feb 13 10:33 
581.2027 Nov 28 03:25   
595.2029 Jan 14 17:26 
582.2027 Dec 27 20:14 
594.2028 Dec 16 02:07 
583.2028 Jan 26 15:14 
593.2028 Nov 16 13:19 
584.2028 Feb 25 10:39 
592.2028 Oct 18 02:57
585.2028 Mar 26 04:33 
591.2028 Sep 18 18:25 
586.2028 Apr 24 19:49 
590.2028 Aug 20 10:45 
587.2028 May 24 08:18  
589.2028 Jul 22 03:03  
588.2028 Jun 22 18:29 
588.2028 Jun 22 18:29  
589.2028 Jul 22 03:03 
587.2028 May 24 08:18
590.2028 Aug 20 10:45 
586.2028 Apr 24 19:49  
591.2028 Sep 18 18:25 
585.2028 Mar 26 04:33 
592.2028 Oct 18 02:57 
584.2028 Feb 25 10:39 
593.2028 Nov 16 13:19   
583.2028 Jan 26 15:14 
594.2028 Dec 16 02:07 
582.2027 Dec 27 20:14 
595.2029 Jan 14 17:26 
581.2027 Nov 28 03:25  
596.2029 Feb 13 10:33  
580.2027 Oct 29 13:37  
597.2029 Mar 15 04:21  
579.2027 Sep 30 02:37  
598.2029 Apr 13 21:42  
578.2027 Aug 31 17:42  
599.2029 May 13 13:44  
577.2027 Aug 02 10:06  
600.2029 Jun 12 03:52   
576.2027 Jul 04 03:03  
601.2029 Jul 11 15:52  
575.2027 Jun 04 19:42 
602.2029 Aug 10 01:57 
574.2027 May 06 11:00 
603.2029 Sep 08 10:45 
573.2027 Apr 06 23:54 
604.2029 Oct 07 19:15 
572.2027 Mar 08 09:31 
605.2029 Nov 06 04:25 
571.2027 Feb 06 15:57 
606.2029 Dec 05 14:53 
570.2027 Jan 07 20:25 
607.2030 Jan 04 02:51   
569.2026 Dec 09 00:53 
608.2030 Feb 02 16:10 
568.2026 Nov 09 07:03 
609.2030 Mar 04 06:37 
567.2026 Oct 10 15:50 
610.2030 Apr 02 22:05 
566.2026 Sep 11 03:27 
611.2030 May 02 14:14 
565.2026 Aug 12 17:38 
612.2030 Jun 01 06:22 
564.2026 Jul 14 09:45 
613.2030 Jun 30 21:35 
563.2026 Jun 15 02:56 
614.2030 Jul 30 11:11 
562.2026 May 16 20:03
615.2030 Aug 28 23:07  
561.2026 Apr 17 11:54  
616.2030 Sep 27 09:55 
560.2026 Mar 19 01:26 
617.2030 Oct 26 20:17 
559.2026 Feb 17 12:03   
618.2030 Nov 25 06:47 
558.2026 Jan 18 19:53 
619.2030 Dec 24 17:33 
557.2025 Dec 20 01:44 
620.2031 Jan 23 04:33 
556.2025 Nov 20 06:48 
621.2031 Feb 21 15:52 
555.2025 Oct 21 12:26 
622.2031 Mar 23 03:52 
554.2025 Sep 21 19:55 
623.2031 Apr 21 17:00 
553.2025 Aug 23 06:07 
624.2031 May 21 07:20 
552.2025 Jul 24 19:12 
625.2031 Jun 19 22:27 
551.2025 Jun 25 10:34 
626.2031 Jul 19 13:41 
550.2025 May 27 03:04
627.2031 Aug 18 04:33 
549.2025 Apr 27 19:33  
628.2031 Sep 16 18:47 
548.2025 Mar 29 11:00 
629.2031 Oct 16 08:21 
547.2025 Feb 28 00:47 
630.2031 Nov 14 21:10 
546.2025 Jan 29 12:37 
631.2031 Dec 14 09:06 
545.2024 Dec 30 22:28 
632.2032 Jan 12 20:07 
544.2024 Dec 01 06:22 
633.2032 Feb 11 06:26 
543.2024 Nov 01 12:48 
634.2032 Mar 11 16:27   
542.2024 Oct 02 18:51 
635.2032 Apr 10 02:42 
541.2024 Sep 03 01:57 
636.2032 May 09 13:38 
540.2024 Aug 04 11:14 
637.2032 Jun 08 01:35 
539.2024 Jul 05 22:59 
638.2032 Jul 07 14:44 
538.2024 Jun 06 12:40 
639.2032 Aug 06 05:13 
537.2024 May 08 03:24 
640.2032 Sep 04 20:58 
536.2024 Apr 08 18:23 
641.2032 Oct 04 13:27 
535.2024 Mar 10 09:03 
642.2032 Nov 03 05:45 
534.2024 Feb 09 23:01
643.2032 Dec 02 20:53 
533.2024 Jan 11 11:58 
644.2033 Jan 01 10:18 
532.2023 Dec 12 23:32 
645.2033 Jan 30 22:01 
531.2023 Nov 13 09:27 
646.2033 Mar 01 08:25 
530.2023 Oct 14 17:55 
647.2033 Mar 30 17:54 
529.2023 Sep 15 01:40 
648.2033 Apr 29 02:48 
528.2023 Aug 16 09:39   
649.2033 May 28 11:39 
527.2023 Jul 17 18:33 
650.2033 Jun 26 21:09 
526.2023 Jun 18 04:39 
651.2033 Jul 26 08:14 
525.2023 May 19 15:56
652.2033 Aug 24 21:41  
524.2023 Apr 20 04:16   
653.2033 Sep 23 13:41  
523.2023 Mar 21 17:27  
654.2033 Oct 23 07:29  
522.2023 Feb 20 07:09 
655.2033 Nov 22 01:40  
521.2023 Jan 21 20:56  
656.2033 Dec 21 18:48 
520.2022 Dec 23 10:18 
657.2034 Jan 20 10:03 
519.2022 Nov 23 22:57   
658.2034 Feb 18 23:12 
518.2022 Oct 25 10:48  
659.2034 Mar 20 10:17  
517.2022 Sep 25 21:54 
660.2034 Apr 18 19:28  
516.2022 Aug 27 08:17  
661.2034 May 18 03:14 
515.2022 Jul 28 17:55    
662.2034 Jun 16 10:27   
514.2022 Jun 29 02:53 
663.2034 Jul 15 18:17 
513.2022 May 30 11:32 
664.2034 Aug 14 03:54 
512.2022 Apr 30 20:31 
665.2034 Sep 12 16:15 
511.2022 Apr 01 06:28  
666.2034 Oct 12 07:34 
510.2022 Mar 02 17:38  
667.2034 Nov 11 01:18  
509.2022 Feb 01 05:49 
668.2034 Dec 10 20:16 
508.2022 Jan 02 18:36 
669.2035 Jan 09 15:05 
507.2021 Dec 04 07:45  
670.2035 Feb 08 08:24 
506.2021 Nov 04 21:15 
671.2035 Mar 09 23:12  
505.2021 Oct 06 11:06  
672.2035 Apr 08 11:00 
504.2021 Sep 07 00:52  
673.2035 May 07 20:05  
503.2021 Aug 08 13:51 
674.2035 Jun 06 03:22     
502.2021 Jul 10 01:18
675.2035 Jul 05 10:00 
501.2021 Jun 10 10:54 
676.2035 Aug 03 17:13 
500.2021 May 11 19:02 
677.2035 Sep 02 02:01  
499.2021 Apr 12 02:33 
678.2035 Oct 01 13:08  
498.2021 Mar 13 10:24 
679.2035 Oct 31 03:00  
497.2021 Feb 11 19:08  
680.2035 Nov 29 19:39 
496.2021 Jan 13 05:03  
681.2035 Dec 29 14:33 
495.2020 Dec 14 16:19  
682.2036 Jan 28 10:19 
494.2020 Nov 15 05:09  
683.2036 Feb 27 05:02 
493.2020 Oct 16 19:32 
684.2036 Mar 27 21:00 
492.2020 Sep 17 11:01  
685.2036 Apr 26 09:36 
491.2020 Aug 19 02:42 
686.2036 May 25 19:19  
490.2020 Jul 20 17:34 
687.2036 Jun 24 03:11 
489.2020 Jun 21 06:42 
688.2036 Jul 23 10:19 
488.2020 May 22 17:40
689.2036 Aug 21 17:36  
487.2020 Apr 23 02:27   
690.2036 Sep 20 01:53 
486.2020 Mar 24 09:30  
691.2036 Oct 19 11:51  
485.2020 Feb 23 15:34 
692.2036 Nov 18 00:15    
484.2020 Jan 24 21:44 
693.2036 Dec 17 15:36 
483.2019 Dec 26 05:16  
694.2037 Jan 16 09:36 
482.2019 Nov 26 15:08 
695.2037 Feb 15 04:56 
481.2019 Oct 28 03:40 
696.2037 Mar 16 23:39 
480.2019 Sep 28 18:28 
697.2037 Apr 15 16:11 
479.2019 Aug 30 10:38 
698.2037 May 15 05:57 
478.2019 Aug 01 03:13 
699.2037 Jun 13 17:12 
477.2019 Jul 02 19:17 
700.2037 Jul 13 02:33 
476.2019 Jun 03 10:03 
701.2037 Aug 11 10:43   
475.2019 May 04 22:47 
702.2037 Sep 09 18:26 
474.2019 Apr 05 08:52 
703.2037 Oct 09 02:36 
473.2019 Mar 06 16:05 
704.2037 Nov 07 12:05 
472.2019 Feb 04 21:05 
705.2037 Dec 06 23:40 
471.2019 Jan 06 01:30''')

datax=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236]

data2x=[236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471]

data3x=[471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706]

allxdata=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708]

nineteen81=[29.6187, 29.5118, 29.409, 29.3333, 29.3006, 29.3131, 29.3673, 29.452, 29.5576, 29.6708, 29.7673, 29.8138, 29.7819, 29.6791, 29.5451, 29.4243, 29.3409, 29.2993, 29.2951, 29.325, 29.3916, 29.4958, 29.6298, 29.7555, 29.8263, 29.8083, 29.7173, 29.593, 29.477, 29.3833, 29.3201, 29.2909, 29.3034, 29.3618, 29.4618, 29.5868, 29.7013, 29.7708, 29.7812, 29.7347, 29.65, 29.5437, 29.4375, 29.3562, 29.3159, 29.3229, 29.3736, 29.4506, 29.5347, 29.6118, 29.6763, 29.7194, 29.7243, 29.6798, 29.5951, 29.4986, 29.4229, 29.3847, 29.3847, 29.4076, 29.4409, 29.4777, 29.5236, 29.5805, 29.6368, 29.6673, 29.6597, 29.6208, 29.5694, 29.5236, 29.4888, 29.4638, 29.4451, 29.4361, 29.4416, 29.4631, 29.4958, 29.534, 29.568, 29.5993, 29.625, 29.6388, 29.6319, 29.5965, 29.5458, 29.4951, 29.459, 29.4368, 29.4229, 29.4145, 29.4243, 29.4597, 29.527, 29.6097, 29.6791, 29.7076, 29.6881, 29.6361, 29.5736, 29.5111, 29.4458, 29.3854, 29.3423, 29.3381, 29.3791, 29.4625, 29.5687, 29.668, 29.7361, 29.759, 29.7354, 29.6673, 29.5659, 29.4541, 29.3604, 29.3048, 29.2972, 29.3326, 29.4055, 29.5048, 29.6187, 29.7277, 29.8041, 29.8111, 29.7375, 29.6111, 29.477, 29.3729, 29.3125, 29.2916, 29.3062, 29.3562, 29.4423, 29.5645, 29.6986, 29.8013, 29.8263, 29.7659, 29.652, 29.5298, 29.425, 29.3479, 29.3034, 29.2965, 29.3319, 29.4118, 29.5263, 29.6472, 29.7388, 29.7763, 29.7569, 29.6902, 29.5958, 29.4895, 29.3972, 29.3361, 29.3208, 29.3506, 29.4159, 29.4951, 29.5722, 29.6388, 29.6909, 29.7166, 29.7006, 29.6388, 29.5486, 29.4631, 29.4083, 29.3902, 29.4034, 29.4298, 29.4597, 29.4951, 29.5416, 29.5979, 29.6437, 29.6597, 29.6409, 29.5986, 29.5541, 29.5166, 29.4868, 29.4631, 29.4444, 29.4368, 29.4444, 29.4687, 29.5027, 29.5402, 29.5756, 29.6097, 29.6381, 29.6472, 29.6298, 29.5847, 29.5277, 29.4791, 29.4451, 29.4229, 29.4083, 29.4062, 29.4284, 29.4833, 29.5652, 29.6506, 29.7083, 29.7145, 29.6756, 29.6131, 29.5444, 29.4763, 29.4076, 29.3527, 29.327, 29.3458, 29.4118, 29.5131, 29.6243, 29.7138, 29.7618, 29.7611, 29.7111, 29.6201, 29.5062, 29.3986, 29.3208, 29.2902, 29.3062, 29.3645, 29.4534, 29.5638, 29.6798, 29.777, 29.8208]

nineteen81r=nineteen81[::-1]

temin = min((d) for d in nineteen81)
temax = max((d) for d in nineteen81)

normalise = [i * 100000 for i in nineteen81]

temin1 = temin * 10000
temax1 = temax * 10000

diff = temax1 - temin1
avg = (diff/2)
result = avg + temin1
result1 = (result * 10)
result1 = result1 - 2900000
shift = [x - 2900000 for x in normalise]
shiftr = shift[::-1]
shiftx = [l - result1 for l in shift]
shifty = [l - result1 for l in shiftr]
zarray = [x + y for x, y in zip(shiftx, shifty)]
zarraythree = [f / 100000 for f in zarray]
zarraytwo = [f + 29 for f in zarraythree]

twentyeighteen=[29.7847, 29.6763, 29.5388, 29.4159, 29.3347, 29.2958, 29.2951, 29.3291, 29.3979, 29.5034, 29.6347, 29.7576, 29.8229, 29.8013, 29.709, 29.5861, 29.4722, 29.3826, 29.3243, 29.2986, 29.3138, 29.3722, 29.4701, 29.5888, 29.6958, 29.7583, 29.7652, 29.7208, 29.6416, 29.5423, 29.4437, 29.3673, 29.3298, 29.3381, 29.3875, 29.4583, 29.534, 29.6013, 29.6569, 29.6972, 29.7048, 29.6701, 29.5965, 29.509, 29.4402, 29.4041, 29.4041, 29.4229, 29.4479, 29.4743, 29.509, 29.5583, 29.6104, 29.6465, 29.6486, 29.6222, 29.5826, 29.5451, 29.5131, 29.4854, 29.4597, 29.4409, 29.4347, 29.4465, 29.4736, 29.5097, 29.5479, 29.5881, 29.6256, 29.6527, 29.6541, 29.6222, 29.5666, 29.5083, 29.4611, 29.4284, 29.4062, 29.3944, 29.4041, 29.4437, 29.5173, 29.6104, 29.6909, 29.7284, 29.7104, 29.6548, 29.5833, 29.5097, 29.4368, 29.3708, 29.327, 29.3236, 29.368, 29.4576, 29.5701, 29.6784, 29.7513, 29.7756, 29.7479, 29.6715, 29.5625, 29.4451, 29.3493, 29.2951, 29.2888, 29.3291, 29.4062, 29.5097, 29.6263, 29.7368, 29.8111, 29.8138, 29.7368, 29.6048, 29.4694, 29.3666, 29.3083, 29.2909, 29.3104, 29.3631, 29.45, 29.5701, 29.7006, 29.7986, 29.8194, 29.7569, 29.6444, 29.5243, 29.4236, 29.3506, 29.3111, 29.3062, 29.3437, 29.4215, 29.5312, 29.6444, 29.7277, 29.7604, 29.7402, 29.6784, 29.5916, 29.4937, 29.4069, 29.35, 29.3368, 29.3666, 29.4263, 29.4979, 29.5652, 29.6215, 29.668, 29.6951, 29.6861, 29.6354, 29.5569, 29.4791, 29.4277, 29.4111, 29.4201, 29.4402, 29.4604, 29.4847, 29.5215, 29.5729, 29.6201, 29.6437, 29.6368, 29.6083, 29.5722, 29.5402, 29.5111, 29.4805, 29.4534, 29.4347, 29.4319, 29.4479, 29.4791, 29.5173, 29.5611, 29.6055, 29.6458, 29.6673, 29.6541, 29.6083, 29.5444, 29.4854, 29.4402, 29.4097, 29.3888, 29.3868, 29.4111, 29.4708, 29.5618, 29.6583, 29.725, 29.7368, 29.6958, 29.6256, 29.5479, 29.4694, 29.3951, 29.3375, 29.3131, 29.334, 29.4055, 29.5125, 29.6305, 29.727, 29.7777, 29.7736, 29.718, 29.6194, 29.4993, 29.3881, 29.3111, 29.2826, 29.3013, 29.3645, 29.4576, 29.5708, 29.6875, 29.7833, 29.8243, 29.784, 29.6715, 29.5319, 29.4097, 29.3298, 29.2951, 29.2979, 29.3361, 29.4062, 29.5104, 29.6381, 29.7555]

twentyeighteenr=twentyeighteen[::-1]

temin = min((d) for d in twentyeighteen)
temax = max((d) for d in twentyeighteen)

normalise = [i * 100000 for i in twentyeighteen]

temin1 = temin * 10000
temax1 = temax * 10000

diff = temax1 - temin1
avg = (diff/2)
result = avg + temin1
result1 = (result * 10)
result1 = result1 - 2900000
shift = [x - 2900000 for x in normalise]
shiftr = shift[::-1]
shiftx = [l - result1 for l in shift]
shifty = [l - result1 for l in shiftr]
zarray = [x + y for x, y in zip(shiftx, shifty)]
zarraythree = [f / 100000 for f in zarray]
zarrayfour = [f + 29 for f in zarraythree]

twenty37=[29.8159, 29.7916, 29.6993, 29.5798, 29.4694, 29.3847, 29.3305, 29.309, 29.3263, 29.3833, 29.4777, 29.5888, 29.6861, 29.743, 29.7472, 29.7062, 29.634, 29.543, 29.4527, 29.3805, 29.3465, 29.3548, 29.4006, 29.4652, 29.5305, 29.5868, 29.6361, 29.6729, 29.6868, 29.6611, 29.6, 29.5229, 29.459, 29.4263, 29.4229, 29.4375, 29.452, 29.4673, 29.4923, 29.5347, 29.5854, 29.6256, 29.6395, 29.6263, 29.5986, 29.5673, 29.5375, 29.5062, 29.4729, 29.443, 29.4256, 29.4291, 29.4506, 29.4861, 29.5298, 29.5791, 29.6291, 29.6673, 29.677, 29.6472, 29.5868, 29.518, 29.4604, 29.418, 29.3888, 29.3756, 29.3861, 29.4298, 29.5104, 29.6131, 29.7041, 29.7479, 29.7319, 29.6708, 29.5895, 29.5069, 29.4256, 29.3562, 29.3131, 29.3125, 29.3597, 29.4548, 29.575, 29.6881, 29.7652, 29.7888, 29.7562, 29.6736, 29.5576, 29.4361, 29.3395, 29.2868, 29.284, 29.3284, 29.409, 29.5159, 29.634, 29.743, 29.8138, 29.8138, 29.7319, 29.5993, 29.4625, 29.3625, 29.3062, 29.2937, 29.3166, 29.3715, 29.4583, 29.575, 29.7006, 29.7916, 29.809, 29.7458, 29.6361, 29.5201, 29.4243, 29.3569, 29.3208, 29.3194, 29.3555, 29.4319, 29.5333, 29.6381, 29.7131, 29.7416, 29.7229, 29.668, 29.5888, 29.5, 29.4201, 29.3666, 29.3541, 29.3819, 29.4361, 29.4986, 29.5548, 29.602, 29.6444, 29.6729, 29.6722, 29.634, 29.5666, 29.4972, 29.45, 29.4319, 29.4375, 29.4486, 29.4583, 29.4715, 29.5, 29.5472, 29.5972, 29.6298, 29.6347, 29.6194, 29.593, 29.5652, 29.534, 29.4972, 29.459, 29.4298, 29.4173, 29.427, 29.4555, 29.4979, 29.5479, 29.6034, 29.6562, 29.6868, 29.6791, 29.6305, 29.559, 29.4881, 29.4333, 29.3951, 29.3708, 29.3687, 29.3958, 29.4618, 29.5604, 29.6666, 29.7416, 29.7576, 29.7138, 29.6354, 29.5479, 29.4618, 29.3826, 29.3236, 29.3006, 29.3263, 29.4006, 29.5145, 29.6381, 29.7388, 29.7902, 29.784, 29.7215, 29.6166, 29.4916, 29.3784, 29.3034, 29.2763, 29.3006, 29.3666, 29.4631, 29.5777, 29.6937, 29.7875, 29.8236, 29.7798, 29.6652, 29.525, 29.4048, 29.3277, 29.2972, 29.3034, 29.3451, 29.4152, 29.5166, 29.6395, 29.75, 29.8055, 29.7798, 29.6888, 29.5736, 29.4687, 29.3895, 29.3402, 29.3215, 29.3402, 29.3951, 29.4826, 29.5861]

twenty37r=twenty37[::-1]

temin = min((d) for d in twenty37)
temax = max((d) for d in twenty37)

normalise = [i * 100000 for i in twenty37]

temin1 = temin * 10000
temax1 = temax * 10000

diff = temax1 - temin1
avg = (diff/2)
result = avg + temin1
result1 = (result * 10)
result1 = result1 - 2900000
shift = [x - 2900000 for x in normalise]
shiftr = shift[::-1]
shiftx = [l - result1 for l in shift]
shifty = [l - result1 for l in shiftr]
zarray = [x + y for x, y in zip(shiftx, shifty)]
zarraythree = [f / 100000 for f in zarray]
twenty37avg = [f + 29 for f in zarraythree]

alldates= nineteen81 + twentyeighteen + twenty37

alldatesr = alldates[::-1]

temin = min((d) for d in alldates)
temax = max((d) for d in alldates)

normalise = [i * 100000 for i in alldates]

temin1 = temin * 10000
temax1 = temax * 10000

diff = temax1 - temin1
avg = (diff/2)
result = avg + temin1
result1 = (result * 10)
result1 = result1 - 2900000
shift = [x - 2900000 for x in normalise]
shiftr = shift[::-1]
shiftx = [l - result1 for l in shift]
shifty = [l - result1 for l in shiftr]
zarray = [x + y for x, y in zip(shiftx, shifty)]
zarraythree = [f / 100000 for f in zarray]
alldatesavg = [f + 29 for f in zarraythree]

tab_selected_style = {
    'borderTop': '1px solid #d6d6d6',
    'backgroundColor': 'rgb(59, 57, 57)',
    'color': 'white',
}


app.layout = html.Div(
    html.Div([
        html.Div([
            html.Br(),
            html.H1('Lunar Cycle Calendar'),
        ], className = "row"),
        html.Hr(id='title', style=styles['hr']),
        html.Br(),

        dcc.Tabs(id="tabs", value='81', style={'color': 'rgb(42, 244, 232)'}, children=[
            dcc.Tab(label='1981-1999', value='81', selected_style=tab_selected_style, style={'backgroundColor': 'rgb(59, 57, 57)'}),
            dcc.Tab(label='2000-2018', value='00', selected_style=tab_selected_style, style={'backgroundColor': 'rgb(59, 57, 57)'}),
            dcc.Tab(label='2019-2037', value='19', selected_style=tab_selected_style, style={'backgroundColor': 'rgb(59, 57, 57)'}),
            dcc.Tab(label='All', value='All-dates', selected_style=tab_selected_style, style={'backgroundColor': 'rgb(59, 57, 57)'}),
            dcc.Tab(label='Search', value='search-dates', selected_style=tab_selected_style, style={'backgroundColor': 'rgb(59, 57, 57)'}),
        ]),
        html.Div(id='tabs-content'),
        html.Div([
                  html.Br(),
                  html.Hr(id='footer', style=styles['hr']),
                  html.Br(),
                  html.Footer(
                        html.Center('Cataphysical Research Society - 2018.' ),
                  ),
        ], className = "row"),
]),
)

@app.callback(Output('tabs-content', 'children'),
                        [Input('tabs', 'value')])
def render_content(tab):
    if tab == '81':
        return html.Div([
            html.Div([
                html.Br(),
                html.Button('Metonic', id='bt5', n_clicks_timestamp='1',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Disintegration', id='bt6', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Corealisation', id='bt7', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Intergeneralisation', id='bt8', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
            html.Div(id='container', style={'color': 'rgb(42, 244, 232)'})
            ]),
            html.Div([
            html.Br(),
            ]),
            html.Div([
                html.Div([
                    dcc.Graph(id='graph-output2', style={'height': 440}),
                ], className = "ten columns"),
                html.Div([
                  html.Div(id='text-output'),
                ], className = "two columns"),
            ], className="row"),
        ])
           
    elif tab == '00':
        return  html.Div([
            html.Div([
                html.Br(),
                html.Button('Metonic', id='bt1', n_clicks_timestamp='1',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Disintegration', id='bt2', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Corealisation', id='bt3', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Intergeneralisation', id='bt4', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
            html.Div(id='container', style={'color': 'rgb(42, 244, 232)'})
            ]),
            html.Div([
            html.Br(),
            ]),
            html.Div([
                html.Div([
                    dcc.Graph(id='graph-output1', style={'height': 440}),
                ], className = "ten columns"),
                html.Div([
                    html.Div(id='text-output'),
                ], className= "two columns")
            ], className="row"),
        ])
    elif tab == '19':
        return  html.Div([
            html.Div([
                html.Br(),
                html.Button('Metonic', id='bt17', n_clicks_timestamp='1',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Disintegration', id='bt18', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Corealisation', id='bt19', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Intergeneralisation', id='bt20', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
            html.Div(id='container', style={'color': 'rgb(42, 244, 232)'})
            ]),
            html.Div([
            html.Br(),
            ]),
            html.Div([
                html.Div([
                    dcc.Graph(id='graph-output5', style={'height': 440}),
                ], className = "ten columns"),
                html.Div([
                    html.Div(id='text-output'),
                ], className= "two columns")
            ], className="row"),
        ])
    elif tab == 'All-dates':
        return  html.Div([
            html.Div([
                html.Br(),
                html.Button('Metonic', id='bt9', n_clicks_timestamp='1',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Disintegration', id='bt10', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Corealisation', id='bt11', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Intergeneralisation', id='bt12', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
            html.Div(id='container', style={'color': 'rgb(42, 244, 232)'})
            ]),
            html.Div([
            html.Br(),
            ]),
            html.Div([
                html.Div([
                    dcc.Graph(id='graph-output3', style={'height': 440, 'width': '96%'}),
                ], className="twelve columns"),
           ], className="row"), 
        ])
    elif tab == 'search-dates':
        return html.Div([
            html.Div([
                html.Br(),
                    dcc.Input(id='start',
                            value='200',
                            type='text',
                            style={'width': '50', 'margin-left': 25}),
                   dcc.Input(id='end',
                            value='455',
                            type='text',
                            style={'width': '50', 'margin-left': 14}),
                    html.P('If you can, use the tabs above to find the Cataphysical Lunation Number (CLN) preceeding closest to your Date of Birth. Then find the current CLN and input both numbers into the available fields.', style={'display': 'inline-block', 'font-size': 11, 'margin-left': 14}),
                html.Div(id='date-container-output'),
            ], className = 'row'),
            html.Div([
            html.Br(),
                html.Button('Metonic', id='bt13', n_clicks_timestamp='1',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Disintegration', id='bt14', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Corealisation', id='bt15', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
                html.Button('Intergeneralisation', id='bt16', n_clicks_timestamp='0',  style={'color': 'rgb(42, 244, 232)'}),
            html.Div(id='container', style={'color': 'rgb(42, 244, 232)'})
            ]),
            html.Div([
                html.Div([
                    html.Br(),
                    dcc.Graph(id='graph-output4', style={'height': 440, 'width': '96%'}),
                ], className="twelve columns"),
            ], className="row"),        
        ])       

@app.callback(Output('text-output', 'children'),
                        [Input('tabs', 'value')])
def render_content(tab):
    if tab == '81':
        return html.Div([
            html.Br(),
            html.P('New Moons', style={'font-family': 'inherit', 'size': 28}),                   
            dcc.Textarea(id='textbox3', value=moon81, readOnly = True, rows=21, style={'width': '100%',  'height': 305, 'padding-top': 1, 'padding-bottom': 6, 'background-color': '#695e5e', 'border-radius': 1, 'resize': 'none', 'font-family': 'inherit', 'color': 'rgb(123, 243, 114)', 'margin-top': 0, 'margin-right': 0, 'margin-left': -25}
            )
        ])
    elif tab == '00':
        return html.Div([
            html.Br(),
            html.P('New Moons', style={'font-family': 'inherit', 'size': 28}),                   
            dcc.Textarea(id='textbox4', value=moon00, readOnly = True, rows=21, style={'width': '100%',  'height': 305, 'padding-top': 1, 'padding-bottom': 6, 'background-color': 'rgb(105, 94, 94)', 'border-radius': 1, 'resize': 'none', 'font-family': 'inherit', 'color': 'rgb(245,250,239)', 'margin-top': 0, 'margin-right': 0, 'margin-left': -25}
            )
        ])
    elif tab == '19':
        return html.Div([
            html.Br(),
            html.P('New Moons', style={'font-family': 'inherit', 'size': 28}),                   
            dcc.Textarea(id='textbox5', value=moon19, readOnly = True, rows=21, style={'width': '100%',  'height': 305, 'padding-top': 1, 'padding-bottom': 6, 'background-color': 'rgb(105, 94, 94)', 'border-radius': 1, 'resize': 'none', 'font-family': 'inherit', 'color': 'rgb(1, 242, 255)', 'margin-top': 0, 'margin-right': 0, 'margin-left': -25}
            )
        ])

@app.callback(dash.dependencies.Output('graph-output2', 'figure'),
             [dash.dependencies.Input('bt5', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt6', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt7', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt8', 'n_clicks_timestamp')])
def func(bt5, bt6, bt7, bt8):
    if int(bt5) > int(bt6) and int(bt5) > int(bt7):
        e = 6
        if e == 6 and int(bt5) > int(bt8):
            return {
                'data': [go.Scatter(
                        x= datax[:], 
                        y= nineteen81[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-1999", 
                        visible= True),
                    ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "1981-1999", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    elif int(bt6) > int(bt5) and int(bt6) > int(bt7):
        e = 7
        if e == 7 and int(bt6) > int(bt8):
            return {
                'data': [go.Scatter(
                        x=datax[:],
                        y= nineteen81r[:],
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-1999", 
                        visible= True)
                ],
                'layout' : go.Layout(
                      font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "1981-1999", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }

    elif int(bt7) > int(bt5) and int(bt7) > int(bt6):
        e = 8
        if e == 8 and int(bt7) > int(bt8):
            return {
                'data': [go.Scatter(
                        x=datax[:], 
                        y= nineteen81[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-1999", 
                        visible= True
                    ), 
                    go.Scatter(
                        x=datax[:], 
                        y= nineteen81r[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-1999", 
                        visible= True
                    ),
                ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "1981-1999", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    start = True
    while start and int(bt8) > int(bt5) and int(bt8) > int(bt6) and int(bt8) > int(bt7):
        return {
            'data': [go.Scatter(
                    x=datax[:], 
                    y= zarraytwo[:], 
                    connectgaps= True, 
                    line= {"color": "rgb(123, 243, 114)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                    name= "1981-1999", 
                    visible= True
                ),
            ],
            'layout' : go.Layout(
                font= {
                    "color": "rgb(245, 250, 245)", 
                    "size": 11
                  }, 
                  margin= {
                    "t": 60, 
                    "b": 80,
                    "r": 0,
                    "l": 55,
                  }, 
                  paper_bgcolor= "rgb(59, 57, 57)", 
                  plot_bgcolor= "rgb(105, 94, 94)", 
                  showlegend= False, 
                  title= "1981-1999", 
                  titlefont= {"size": 17}, 
                  xaxis={
                    "autorange": True, 
                    "fixedrange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "linecolor": "rgb(140, 143, 145)", 
                    "linewidth": 2, 
                    "mirror": "ticks", 
                    "nticks": 15, 
                    "range": [-13.9804469274, 263.980446927], 
                    "rangeslider": {
                      "autorange": True, 
                      "bgcolor": "rgb(105, 94, 94)", 
                      "bordercolor": "rgb(140, 143, 145)", 
                      "borderwidth": 1, 
                      "range": [-13.9804469274, 263.980446927], 
                      "thickness": 0.15, 
                      "visible": True, 
                      "yaxis": {"rangemode": "match"}
                    }, 
                    "showline": True, 
                    "title": "months", 
                    "titlefont": {"size": 12}, 
                    "type": "linear", 
                    "zerolinecolor": "rgb(255, 255, 255)"
                  }, 
                  yaxis={
                    "autorange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "gridwidth": 1, 
                    "nticks": 8, 
                    "range": [28.413251569, 29.577248431], 
                    "title": "days", 
                    "titlefont": {"size": 12}, 
                    "type": "linear"
                  }
            )
        }       
        start = False


@app.callback(dash.dependencies.Output('textbox3', 'value'),
             [dash.dependencies.Input('bt5', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt6', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt7', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt8', 'n_clicks_timestamp')])
def moons(bt5, bt6, bt7, bt8):
    if int(bt5) > int(bt6) and int(bt5) > int(bt7):
        e = 9
        if e == 9 and int(bt5) > int(bt8):
            return(moon81)
    elif int(bt6) > int(bt5) and int(bt6) > int(bt7):
        e = 10
        if e == 10 and int(bt6) > int(bt8):
            return(moon81r)
    elif int(bt7) > int(bt5) and int(bt7) > int(bt6):
        e = 11
        if e == 11 and int(bt7) > int(bt8):
            return(moon81co)
    start = True
    while start and int(bt8) > int(bt5) and int(bt8) > int(bt6) and int(bt8) > int(bt7):
        return(moon81)
        start = False

@app.callback(dash.dependencies.Output('graph-output1', 'figure'),
             [dash.dependencies.Input('bt1', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt2', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt3', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt4', 'n_clicks_timestamp')])
def func(bt1, bt2, bt3, bt4):
    if int(bt1) > int(bt2) and int(bt1) > int(bt3):
        e = 6
        if e == 6 and int(bt1) > int(bt4):
            return {
                'data': [go.Scatter(
                        x= data2x[:], 
                        y= twentyeighteen[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2000-2018", 
                        visible= True),
                    ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "2000-2018", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    elif int(bt2) > int(bt1) and int(bt2) > int(bt3):
        e = 7
        if e == 7 and int(bt2) > int(bt4):
            return {
                'data': [go.Scatter(
                        x=data2x[:],
                        y= twentyeighteenr[:],
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2000-2018", 
                        visible= True)
                ],
                'layout' : go.Layout(
                      font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "2000-2018", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }

    elif int(bt3) > int(bt1) and int(bt3) > int(bt2):
        e = 8
        if e == 8 and int(bt3) > int(bt4):
            return {
                'data': [go.Scatter(
                        x=data2x[:], 
                        y= twentyeighteen[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2000-2018", 
                        visible= True
                    ), 
                    go.Scatter(
                        x=data2x[:], 
                        y= twentyeighteenr[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2000-2018", 
                        visible= True
                    ),
                ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "2000-2018", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    start = True
    while start and int(bt4) > int(bt1) and int(bt4) > int(bt2) and int(bt4) > int(bt3):
        return {
            'data': [go.Scatter(
                    x=data2x[:], 
                    y= zarrayfour[:], 
                    connectgaps= True, 
                    line= {"color": "rgb(123, 243, 114)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                    name= "2000-2018", 
                    visible= True
                ),
            ],
            'layout' : go.Layout(
                font= {
                    "color": "rgb(245, 250, 245)", 
                    "size": 11
                  }, 
                  margin= {
                    "t": 60, 
                    "b": 80,
                    "r": 0,
                    "l": 55,
                  }, 
                  paper_bgcolor= "rgb(59, 57, 57)", 
                  plot_bgcolor= "rgb(105, 94, 94)", 
                  showlegend= False, 
                  title= "2000-2018", 
                  titlefont= {"size": 17}, 
                  xaxis={
                    "autorange": True, 
                    "fixedrange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "linecolor": "rgb(140, 143, 145)", 
                    "linewidth": 2, 
                    "mirror": "ticks", 
                    "nticks": 15, 
                    "range": [-13.9804469274, 263.980446927], 
                    "rangeslider": {
                      "autorange": True, 
                      "bgcolor": "rgb(105, 94, 94)", 
                      "bordercolor": "rgb(140, 143, 145)", 
                      "borderwidth": 1, 
                      "range": [-13.9804469274, 263.980446927], 
                      "thickness": 0.15, 
                      "visible": True, 
                      "yaxis": {"rangemode": "match"}
                    }, 
                    "showline": True, 
                    "title": "months", 
                    "titlefont": {"size": 12}, 
                    "type": "linear", 
                    "zerolinecolor": "rgb(255, 255, 255)"
                  }, 
                  yaxis={
                    "autorange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "gridwidth": 1, 
                    "nticks": 8, 
                    "range": [28.413251569, 29.577248431], 
                    "title": "days", 
                    "titlefont": {"size": 12}, 
                    "type": "linear"
                  }
            )
        }       
        start = False


@app.callback(dash.dependencies.Output('textbox4', 'value'),
             [dash.dependencies.Input('bt1', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt2', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt3', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt4', 'n_clicks_timestamp')])
def moons(bt1, bt2, bt3, bt4):
    if int(bt1) > int(bt2) and int(bt1) > int(bt3):
        e = 9
        if e == 9 and int(bt1) > int(bt4):
            return(moon00)
    elif int(bt2) > int(bt1) and int(bt2) > int(bt3):
        e = 10
        if e == 10 and int(bt2) > int(bt4):
            return(moon00r)
    elif int(bt3) > int(bt1) and int(bt3) > int(bt2):
        e = 11
        if e == 11 and int(bt3) > int(bt4):
            return(moon00co)
    start = True
    while start and int(bt4) > int(bt1) and int(bt4) > int(bt2) and int(bt4) > int(bt3):
        return(moon00)
        start = False

@app.callback(dash.dependencies.Output('graph-output5', 'figure'),
             [dash.dependencies.Input('bt17', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt18', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt19', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt20', 'n_clicks_timestamp')])
def func(bt17, bt18, bt19, bt20):
    if int(bt17) > int(bt18) and int(bt17) > int(bt19):
        e = 6
        if e == 6 and int(bt17) > int(bt20):
            return {
                'data': [go.Scatter(
                        x= data3x[:], 
                        y= twenty37[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2019-2037", 
                        visible= True),
                    ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "2019-2037", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    elif int(bt18) > int(bt17) and int(bt18) > int(bt19):
        e = 7
        if e == 7 and int(bt18) > int(bt20):
            return {
                'data': [go.Scatter(
                        x=data3x[:],
                        y= twenty37r[:],
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2019-2037", 
                        visible= True)
                ],
                'layout' : go.Layout(
                      font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "2019-2037", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }

    elif int(bt19) > int(bt17) and int(bt19) > int(bt18):
        e = 8
        if e == 8 and int(bt19) > int(bt20):
            return {
                'data': [go.Scatter(
                        x=data3x[:], 
                        y= twenty37[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2019-2037", 
                        visible= True
                    ), 
                    go.Scatter(
                        x=data3x[:], 
                        y= twenty37r[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "2019-2037", 
                        visible= True
                    ),
                ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "2019-2037", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 263.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 263.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    start = True
    while start and int(bt20) > int(bt17) and int(bt20) > int(bt18) and int(bt20) > int(bt19):
        return {
            'data': [go.Scatter(
                    x=data3x[:], 
                    y= twenty37avg[:], 
                    connectgaps= True, 
                    line= {"color": "rgb(123, 243, 114)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                    name= "2019-2037", 
                    visible= True
                ),
            ],
            'layout' : go.Layout(
                font= {
                    "color": "rgb(245, 250, 245)", 
                    "size": 11
                  }, 
                  margin= {
                    "t": 60, 
                    "b": 80,
                    "r": 0,
                    "l": 55,
                  }, 
                  paper_bgcolor= "rgb(59, 57, 57)", 
                  plot_bgcolor= "rgb(105, 94, 94)", 
                  showlegend= False, 
                  title= "2019-2037", 
                  titlefont= {"size": 17}, 
                  xaxis={
                    "autorange": True, 
                    "fixedrange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "linecolor": "rgb(140, 143, 145)", 
                    "linewidth": 2, 
                    "mirror": "ticks", 
                    "nticks": 15, 
                    "range": [-13.9804469274, 263.980446927], 
                    "rangeslider": {
                      "autorange": True, 
                      "bgcolor": "rgb(105, 94, 94)", 
                      "bordercolor": "rgb(140, 143, 145)", 
                      "borderwidth": 1, 
                      "range": [-13.9804469274, 263.980446927], 
                      "thickness": 0.15, 
                      "visible": True, 
                      "yaxis": {"rangemode": "match"}
                    }, 
                    "showline": True, 
                    "title": "months", 
                    "titlefont": {"size": 12}, 
                    "type": "linear", 
                    "zerolinecolor": "rgb(255, 255, 255)"
                  }, 
                  yaxis={
                    "autorange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "gridwidth": 1, 
                    "nticks": 8, 
                    "range": [28.413251569, 29.577248431], 
                    "title": "days", 
                    "titlefont": {"size": 12}, 
                    "type": "linear"
                  }
            )
        }       
        start = False


@app.callback(dash.dependencies.Output('textbox5', 'value'),
             [dash.dependencies.Input('bt17', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt18', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt19', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt20', 'n_clicks_timestamp')])
def moons(bt17, bt18, bt19, bt20):
    if int(bt17) > int(bt18) and int(bt17) > int(bt19):
        e = 9
        if e == 9 and int(bt17) > int(bt20):
            return(moon19)
    elif int(bt18) > int(bt17) and int(bt18) > int(bt19):
        e = 10
        if e == 10 and int(bt18) > int(bt20):
            return(moon19r)
    elif int(bt19) > int(bt17) and int(bt19) > int(bt18):
        e = 11
        if e == 11 and int(bt19) > int(bt20):
            return(moon19co)
    start = True
    while start and int(bt20) > int(bt17) and int(bt20) > int(bt18) and int(bt20) > int(bt19):
        return(moon19)
        start = False

@app.callback(dash.dependencies.Output('graph-output3', 'figure'),
             [dash.dependencies.Input('bt9', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt10', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt11', 'n_clicks_timestamp'),
             dash.dependencies.Input('bt12', 'n_clicks_timestamp')])
def func(bt9, bt10, bt11, bt12):
    if int(bt9) > int(bt10) and int(bt9) > int(bt11):
        e = 6
        if e == 6 and int(bt9) > int(bt12):
            return {
                'data': [go.Scatter(
                        x= allxdata[:], 
                        y= alldates[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-2018", 
                        visible= True),
                    ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "1981-2037", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 471.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 471.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    elif int(bt10) > int(bt9) and int(bt10) > int(bt11):
        e = 7
        if e == 7 and int(bt10) > int(bt12):
            return {
                'data': [go.Scatter(
                        x=allxdata[:],
                        y= alldatesr[:],
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-2018", 
                        visible= True)
                ],
                'layout' : go.Layout(
                      font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "1981-2018", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 471.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 471.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }

    elif int(bt11) > int(bt9) and int(bt11) > int(bt10):
        e = 8
        if e == 8 and int(bt11) > int(bt12):
            return {
                'data': [go.Scatter(
                        x=allxdata[:], 
                        y= alldates[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-2018", 
                        visible= True
                    ), 
                    go.Scatter(
                        x=allxdata[:], 
                        y= alldatesr[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "1981-2018", 
                        visible= True
                    ),
                ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 60, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "1981-2018", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 471.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 471.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    start = True
    while start and int(bt12) > int(bt9) and int(bt12) > int(bt10) and int(bt12) > int(bt11):
        return {
            'data': [go.Scatter(
                    x=allxdata[:], 
                    y= alldatesavg[:], 
                    connectgaps= True, 
                    line= {"color": "rgb(123, 243, 114)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                    name= "1981-2018", 
                    visible= True
                ),
            ],
            'layout' : go.Layout(
                font= {
                    "color": "rgb(245, 250, 245)", 
                    "size": 11
                  }, 
                  margin= {
                    "t": 60, 
                    "b": 80,
                    "r": 0,
                    "l": 55,
                  }, 
                  paper_bgcolor= "rgb(59, 57, 57)", 
                  plot_bgcolor= "rgb(105, 94, 94)", 
                  showlegend= False, 
                  title= "1981-2018", 
                  titlefont= {"size": 17}, 
                  xaxis={
                    "autorange": True, 
                    "fixedrange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "linecolor": "rgb(140, 143, 145)", 
                    "linewidth": 2, 
                    "mirror": "ticks", 
                    "nticks": 15, 
                    "range": [-13.9804469274, 471.980446927], 
                    "rangeslider": {
                      "autorange": True, 
                      "bgcolor": "rgb(105, 94, 94)", 
                      "bordercolor": "rgb(140, 143, 145)", 
                      "borderwidth": 1, 
                      "range": [-13.9804469274, 471.980446927], 
                      "thickness": 0.15, 
                      "visible": True, 
                      "yaxis": {"rangemode": "match"}
                    }, 
                    "showline": True, 
                    "title": "months", 
                    "titlefont": {"size": 12}, 
                    "type": "linear", 
                    "zerolinecolor": "rgb(255, 255, 255)"
                  }, 
                  yaxis={
                    "autorange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "gridwidth": 1, 
                    "nticks": 8, 
                    "range": [28.413251569, 29.577248431], 
                    "title": "days", 
                    "titlefont": {"size": 12}, 
                    "type": "linear"
                  }
            )
        }       
        start = False

@app.callback(dash.dependencies.Output('graph-output4', 'figure'),
                         [dash.dependencies.Input('start', 'value'),
                         dash.dependencies.Input('end', 'value'),
                         dash.dependencies.Input('bt13', 'n_clicks_timestamp'),
                         dash.dependencies.Input('bt14', 'n_clicks_timestamp'),
                         dash.dependencies.Input('bt15', 'n_clicks_timestamp'),
                         dash.dependencies.Input('bt16', 'n_clicks_timestamp')])
def func(start, end, bt13, bt14, bt15, bt16):
    starta = int(start)
    endb = int(end)
    ae = starta - 1
    be = endb
    allxdata1 = allxdata[ae:be+1]
    alldates1 = alldates[ae:be+1]
    alldatesr1 = alldates1[::-1]

    temin = min((d) for d in alldates1)
    temax = max((d) for d in alldates1)

    normalise = [i * 100000 for i in alldates1]

    temin1 = temin * 10000
    temax1 = temax * 10000

    diff = temax1 - temin1
    avg = (diff/2)
    result = avg + temin1
    result1 = (result * 10)
    result1 = result1 - 2900000
    shift = [x - 2900000 for x in normalise]
    shiftr = shift[::-1]
    shiftx = [l - result1 for l in shift]
    shifty = [l - result1 for l in shiftr]
    zarray = [x + y for x, y in zip(shiftx, shifty)]
    zarraythree = [f / 100000 for f in zarray]
    alldates1avg = [f + 29 for f in zarraythree]
    if int(bt13) > int(bt14) and int(bt13) > int(bt15):
        e = 6
        if e == 6 and int(bt13) > int(bt16):
            return {
                'data': [go.Scatter(
                        x= allxdata1[:], 
                        y= alldates1[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "Metonic", 
                        visible= True),
                    ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 70, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "METONIC", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 471.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 471.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    elif int(bt14) > int(bt13) and int(bt14) > int(bt15):
        e = 7
        if e == 7 and int(bt14) > int(bt16):
            return {
                'data': [go.Scatter(
                        x=allxdata1[:],
                        y= alldatesr1[:],
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "Disintegration", 
                        visible= True)
                ],
                'layout' : go.Layout(
                      font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 70, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "DISINTEGRATION", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 471.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 471.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }

    elif int(bt15) > int(bt13) and int(bt15) > int(bt14):
        e = 8
        if e == 8 and int(bt15) > int(bt16):
            return {
                'data': [go.Scatter(
                        x=allxdata1[:], 
                        y= alldates1[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(1, 242, 255)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "Metonic", 
                        visible= True
                    ), 
                    go.Scatter(
                        x=allxdata1[:], 
                        y= alldatesr1[:], 
                        connectgaps= True, 
                        line= {"color": "rgb(245,250,239)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                        name= "Disintegration", 
                        visible= True
                    ),
                ],
                'layout' : go.Layout(
                    font= {
                        "color": "rgb(245, 250, 245)", 
                        "size": 11
                      }, 
                      margin= {
                        "t": 70, 
                        "b": 80,
                        "r": 0,
                        "l": 55,
                      }, 
                      paper_bgcolor= "rgb(59, 57, 57)", 
                      plot_bgcolor= "rgb(105, 94, 94)", 
                      showlegend= False, 
                      title= "COREALISATION", 
                      titlefont= {"size": 17}, 
                      xaxis={
                        "autorange": True, 
                        "fixedrange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "linecolor": "rgb(140, 143, 145)", 
                        "linewidth": 2, 
                        "mirror": "ticks", 
                        "nticks": 15, 
                        "range": [-13.9804469274, 471.980446927], 
                        "rangeslider": {
                          "autorange": True, 
                          "bgcolor": "rgb(105, 94, 94)", 
                          "bordercolor": "rgb(140, 143, 145)", 
                          "borderwidth": 1, 
                          "range": [-13.9804469274, 471.980446927], 
                          "thickness": 0.15, 
                          "visible": True, 
                          "yaxis": {"rangemode": "match"}
                        }, 
                        "showline": True, 
                        "title": "months", 
                        "titlefont": {"size": 12}, 
                        "type": "linear", 
                        "zerolinecolor": "rgb(255, 255, 255)"
                      }, 
                      yaxis={
                        "autorange": True, 
                        "gridcolor": "rgb(249, 183, 5)", 
                        "gridwidth": 1, 
                        "nticks": 8, 
                        "range": [28.413251569, 29.577248431], 
                        "title": "days", 
                        "titlefont": {"size": 12}, 
                        "type": "linear"
                      }
                )
            }
    start = True
    while start and int(bt16) > int(bt13) and int(bt16) > int(bt14) and int(bt16) > int(bt15):
        return {
            'data': [go.Scatter(
                    x=allxdata1[:], 
                    y= alldates1avg[:], 
                    connectgaps= True, 
                    line= {"color": "rgb(123, 243, 114)", "shape": "spline", "smoothing": 0.8}, mode="markers+lines", 
                    name= "Intergeneralisation", 
                    visible= True
                ),
            ],
            'layout' : go.Layout(
                font= {
                    "color": "rgb(245, 250, 245)", 
                    "size": 11
                  }, 
                  margin= {
                    "t": 70, 
                    "b": 80,
                    "r": 0,
                    "l": 55,
                  }, 
                  paper_bgcolor= "rgb(59, 57, 57)", 
                  plot_bgcolor= "rgb(105, 94, 94)", 
                  showlegend= False, 
                  title= "INTERGENERALISATION", 
                  titlefont= {"size": 17}, 
                  xaxis={
                    "autorange": True, 
                    "fixedrange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "linecolor": "rgb(140, 143, 145)", 
                    "linewidth": 2, 
                    "mirror": "ticks", 
                    "nticks": 15, 
                    "range": [-13.9804469274, 471.980446927], 
                    "rangeslider": {
                      "autorange": True, 
                      "bgcolor": "rgb(105, 94, 94)", 
                      "bordercolor": "rgb(140, 143, 145)", 
                      "borderwidth": 1, 
                      "range": [-13.9804469274, 471.980446927], 
                      "thickness": 0.15, 
                      "visible": True, 
                      "yaxis": {"rangemode": "match"}
                    }, 
                    "showline": True, 
                    "title": "months", 
                    "titlefont": {"size": 12}, 
                    "type": "linear", 
                    "zerolinecolor": "rgb(255, 255, 255)"
                  }, 
                  yaxis={
                    "autorange": True, 
                    "gridcolor": "rgb(249, 183, 5)", 
                    "gridwidth": 1, 
                    "nticks": 8, 
                    "range": [28.413251569, 29.577248431], 
                    "title": "days", 
                    "titlefont": {"size": 12}, 
                    "type": "linear"
                  }
            )
        }       
        start = False



if __name__ == '__main__':
    app.run_server(debug=True)